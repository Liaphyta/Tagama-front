{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport debounce from '../utils/debounce';\nimport withStyles from '../styles/withStyles';\nimport isMuiElement from '../utils/isMuiElement';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    boxSizing: 'border-box',\n    flexShrink: 0\n  },\n\n  /* Styles applied to the `div` element that wraps the children. */\n  tile: {\n    position: 'relative',\n    display: 'block',\n    // In case it's not rendered with a div.\n    height: '100%',\n    overflow: 'hidden'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullHeight: {\n    height: '100%',\n    transform: 'translateX(-50%)',\n    position: 'relative',\n    left: '50%'\n  },\n\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\n  imgFullWidth: {\n    width: '100%',\n    position: 'relative',\n    transform: 'translateY(-50%)',\n    top: '50%'\n  }\n};\n\nvar fit = (imgEl, classes) => {\n  if (!imgEl || !imgEl.complete) {\n    return;\n  }\n\n  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {\n    imgEl.classList.remove(...classes.imgFullWidth.split(' '));\n    imgEl.classList.add(...classes.imgFullHeight.split(' '));\n  } else {\n    imgEl.classList.remove(...classes.imgFullHeight.split(' '));\n    imgEl.classList.add(...classes.imgFullWidth.split(' '));\n  }\n};\n\nfunction ensureImageCover(imgEl, classes) {\n  if (!imgEl) {\n    return;\n  }\n\n  if (imgEl.complete) {\n    fit(imgEl, classes);\n  } else {\n    imgEl.addEventListener('load', () => {\n      fit(imgEl, classes);\n    });\n  }\n}\n\nvar GridListTile = /*#__PURE__*/React.forwardRef(function GridListTile(props, ref) {\n  // cols rows default values are for docs only\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$cols = props.cols,\n      cols = _props$cols === void 0 ? 1 : _props$cols,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'li' : _props$component,\n      _props$rows = props.rows,\n      rows = _props$rows === void 0 ? 1 : _props$rows,\n      other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\"]);\n\n  var imgRef = React.useRef(null);\n  React.useEffect(() => {\n    ensureImageCover(imgRef.current, classes);\n  });\n  React.useEffect(() => {\n    var handleResize = debounce(() => {\n      fit(imgRef.current, classes);\n    });\n    window.addEventListener('resize', handleResize);\n    return () => {\n      handleResize.clear();\n      window.removeEventListener('resize', handleResize);\n    };\n  }, [classes]);\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\n    className: classes.tile\n  }, React.Children.map(children, child => {\n    if (! /*#__PURE__*/React.isValidElement(child)) {\n      return null;\n    }\n\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\n      return /*#__PURE__*/React.cloneElement(child, {\n        ref: imgRef\n      });\n    }\n\n    return child;\n  })));\n});\nprocess.env.NODE_ENV !== \"production\" ? GridListTile.propTypes = {\n  /**\r\n   * Theoretically you can pass any node as children, but the main use case is to pass an img,\r\n   * in which case GridListTile takes care of making the image \"cover\" available space\r\n   * (similar to `background-size: cover` or to `object-fit: cover`).\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Width of the tile in number of grid cells.\r\n   */\n  cols: PropTypes.number,\n\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType,\n\n  /**\r\n   * Height of the tile in number of grid cells.\r\n   */\n  rows: PropTypes.number\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiGridListTile'\n})(GridListTile);","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/GridListTile/GridListTile.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","debounce","withStyles","isMuiElement","styles","root","boxSizing","flexShrink","tile","position","display","height","overflow","imgFullHeight","transform","left","imgFullWidth","width","top","fit","imgEl","classes","complete","parentElement","offsetWidth","offsetHeight","classList","remove","split","add","ensureImageCover","addEventListener","GridListTile","forwardRef","props","ref","children","className","cols","component","Component","rows","other","imgRef","useRef","useEffect","current","handleResize","window","clear","removeEventListener","createElement","Children","map","child","isValidElement","type","cloneElement","process","env","NODE_ENV","propTypes","node","object","isRequired","string","number","elementType","name"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport debounce from '../utils/debounce';\r\nimport withStyles from '../styles/withStyles';\r\nimport isMuiElement from '../utils/isMuiElement';\r\nexport const styles = {\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    boxSizing: 'border-box',\r\n    flexShrink: 0\r\n  },\r\n\r\n  /* Styles applied to the `div` element that wraps the children. */\r\n  tile: {\r\n    position: 'relative',\r\n    display: 'block',\r\n    // In case it's not rendered with a div.\r\n    height: '100%',\r\n    overflow: 'hidden'\r\n  },\r\n\r\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\r\n  imgFullHeight: {\r\n    height: '100%',\r\n    transform: 'translateX(-50%)',\r\n    position: 'relative',\r\n    left: '50%'\r\n  },\r\n\r\n  /* Styles applied to an `img` element child, if needed to ensure it covers the tile. */\r\n  imgFullWidth: {\r\n    width: '100%',\r\n    position: 'relative',\r\n    transform: 'translateY(-50%)',\r\n    top: '50%'\r\n  }\r\n};\r\n\r\nconst fit = (imgEl, classes) => {\r\n  if (!imgEl || !imgEl.complete) {\r\n    return;\r\n  }\r\n\r\n  if (imgEl.width / imgEl.height > imgEl.parentElement.offsetWidth / imgEl.parentElement.offsetHeight) {\r\n    imgEl.classList.remove(...classes.imgFullWidth.split(' '));\r\n    imgEl.classList.add(...classes.imgFullHeight.split(' '));\r\n  } else {\r\n    imgEl.classList.remove(...classes.imgFullHeight.split(' '));\r\n    imgEl.classList.add(...classes.imgFullWidth.split(' '));\r\n  }\r\n};\r\n\r\nfunction ensureImageCover(imgEl, classes) {\r\n  if (!imgEl) {\r\n    return;\r\n  }\r\n\r\n  if (imgEl.complete) {\r\n    fit(imgEl, classes);\r\n  } else {\r\n    imgEl.addEventListener('load', () => {\r\n      fit(imgEl, classes);\r\n    });\r\n  }\r\n}\r\n\r\nconst GridListTile = /*#__PURE__*/React.forwardRef(function GridListTile(props, ref) {\r\n  // cols rows default values are for docs only\r\n  const {\r\n    children,\r\n    classes,\r\n    className,\r\n    // eslint-disable-next-line no-unused-vars\r\n    cols = 1,\r\n    component: Component = 'li',\r\n    // eslint-disable-next-line no-unused-vars\r\n    rows = 1\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, [\"children\", \"classes\", \"className\", \"cols\", \"component\", \"rows\"]);\r\n\r\n  const imgRef = React.useRef(null);\r\n  React.useEffect(() => {\r\n    ensureImageCover(imgRef.current, classes);\r\n  });\r\n  React.useEffect(() => {\r\n    const handleResize = debounce(() => {\r\n      fit(imgRef.current, classes);\r\n    });\r\n    window.addEventListener('resize', handleResize);\r\n    return () => {\r\n      handleResize.clear();\r\n      window.removeEventListener('resize', handleResize);\r\n    };\r\n  }, [classes]);\r\n  return /*#__PURE__*/React.createElement(Component, _extends({\r\n    className: clsx(classes.root, className),\r\n    ref: ref\r\n  }, other), /*#__PURE__*/React.createElement(\"div\", {\r\n    className: classes.tile\r\n  }, React.Children.map(children, child => {\r\n    if (! /*#__PURE__*/React.isValidElement(child)) {\r\n      return null;\r\n    }\r\n\r\n    if (child.type === 'img' || isMuiElement(child, ['Image'])) {\r\n      return /*#__PURE__*/React.cloneElement(child, {\r\n        ref: imgRef\r\n      });\r\n    }\r\n\r\n    return child;\r\n  })));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? GridListTile.propTypes = {\r\n  /**\r\n   * Theoretically you can pass any node as children, but the main use case is to pass an img,\r\n   * in which case GridListTile takes care of making the image \"cover\" available space\r\n   * (similar to `background-size: cover` or to `object-fit: cover`).\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object.isRequired,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * Width of the tile in number of grid cells.\r\n   */\r\n  cols: PropTypes.number,\r\n\r\n  /**\r\n   * The component used for the root node.\r\n   * Either a string to use a HTML element or a component.\r\n   */\r\n  component: PropTypes\r\n  /* @typescript-to-proptypes-ignore */\r\n  .elementType,\r\n\r\n  /**\r\n   * Height of the tile in number of grid cells.\r\n   */\r\n  rows: PropTypes.number\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiGridListTile'\r\n})(GridListTile);"]},"metadata":{},"sourceType":"module"}