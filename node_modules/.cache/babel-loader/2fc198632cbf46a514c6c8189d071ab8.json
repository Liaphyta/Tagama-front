{"ast":null,"code":"var WritableStream = require('stream').Writable;\n\nvar util = require('util');\n\nvar Blob = require('blob');\n\nvar URL = global.URL || global.webkitURL || global.mozURL;\n\nfunction BlobStream() {\n  if (!(this instanceof BlobStream)) return new BlobStream();\n  WritableStream.call(this);\n  this._chunks = [];\n  this._blob = null;\n  this.length = 0;\n}\n\nutil.inherits(BlobStream, WritableStream);\n\nBlobStream.prototype._write = function (chunk, encoding, callback) {\n  // convert chunks to Uint8Arrays (e.g. Buffer when array fallback is being used)\n  if (!(chunk instanceof Uint8Array)) chunk = new Uint8Array(chunk);\n  this.length += chunk.length;\n\n  this._chunks.push(chunk);\n\n  callback();\n};\n\nBlobStream.prototype.toBlob = function (type) {\n  type = type || 'application/octet-stream'; // cache the blob if needed\n\n  if (!this._blob) {\n    this._blob = new Blob(this._chunks, {\n      type: type\n    });\n    this._chunks = []; // free memory\n  } // if the cached blob's type doesn't match the requested type, make a new blob\n\n\n  if (this._blob.type !== type) this._blob = new Blob([this._blob], {\n    type: type\n  });\n  return this._blob;\n};\n\nBlobStream.prototype.toBlobURL = function (type) {\n  return URL.createObjectURL(this.toBlob(type));\n};\n\nmodule.exports = BlobStream;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/blob-stream/index.js"],"names":["WritableStream","require","Writable","util","Blob","URL","global","webkitURL","mozURL","BlobStream","call","_chunks","_blob","length","inherits","prototype","_write","chunk","encoding","callback","Uint8Array","push","toBlob","type","toBlobURL","createObjectURL","module","exports"],"mappings":"AAAA,IAAIA,cAAc,GAAGC,OAAO,CAAC,QAAD,CAAP,CAAkBC,QAAvC;;AACA,IAAIC,IAAI,GAAGF,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAIG,IAAI,GAAGH,OAAO,CAAC,MAAD,CAAlB;;AACA,IAAII,GAAG,GAAGC,MAAM,CAACD,GAAP,IAAcC,MAAM,CAACC,SAArB,IAAkCD,MAAM,CAACE,MAAnD;;AAEA,SAASC,UAAT,GAAsB;AACpB,MAAI,EAAE,gBAAgBA,UAAlB,CAAJ,EACE,OAAO,IAAIA,UAAJ,EAAP;AAEFT,EAAAA,cAAc,CAACU,IAAf,CAAoB,IAApB;AACA,OAAKC,OAAL,GAAe,EAAf;AACA,OAAKC,KAAL,GAAa,IAAb;AACA,OAAKC,MAAL,GAAc,CAAd;AACD;;AAEDV,IAAI,CAACW,QAAL,CAAcL,UAAd,EAA0BT,cAA1B;;AAEAS,UAAU,CAACM,SAAX,CAAqBC,MAArB,GAA8B,UAASC,KAAT,EAAgBC,QAAhB,EAA0BC,QAA1B,EAAoC;AAChE;AACA,MAAI,EAAEF,KAAK,YAAYG,UAAnB,CAAJ,EACEH,KAAK,GAAG,IAAIG,UAAJ,CAAeH,KAAf,CAAR;AAEF,OAAKJ,MAAL,IAAeI,KAAK,CAACJ,MAArB;;AACA,OAAKF,OAAL,CAAaU,IAAb,CAAkBJ,KAAlB;;AACAE,EAAAA,QAAQ;AACT,CARD;;AAUAV,UAAU,CAACM,SAAX,CAAqBO,MAArB,GAA8B,UAASC,IAAT,EAAe;AAC3CA,EAAAA,IAAI,GAAGA,IAAI,IAAI,0BAAf,CAD2C,CAG3C;;AACA,MAAI,CAAC,KAAKX,KAAV,EAAiB;AACf,SAAKA,KAAL,GAAa,IAAIR,IAAJ,CAAS,KAAKO,OAAd,EAAuB;AAClCY,MAAAA,IAAI,EAAEA;AAD4B,KAAvB,CAAb;AAIA,SAAKZ,OAAL,GAAe,EAAf,CALe,CAKI;AACpB,GAV0C,CAY3C;;;AACA,MAAI,KAAKC,KAAL,CAAWW,IAAX,KAAoBA,IAAxB,EACE,KAAKX,KAAL,GAAa,IAAIR,IAAJ,CAAS,CAAC,KAAKQ,KAAN,CAAT,EAAuB;AAAEW,IAAAA,IAAI,EAAEA;AAAR,GAAvB,CAAb;AAEF,SAAO,KAAKX,KAAZ;AACD,CAjBD;;AAmBAH,UAAU,CAACM,SAAX,CAAqBS,SAArB,GAAiC,UAASD,IAAT,EAAe;AAC9C,SAAOlB,GAAG,CAACoB,eAAJ,CAAoB,KAAKH,MAAL,CAAYC,IAAZ,CAApB,CAAP;AACD,CAFD;;AAIAG,MAAM,CAACC,OAAP,GAAiBlB,UAAjB","sourcesContent":["var WritableStream = require('stream').Writable;\r\nvar util = require('util');\r\nvar Blob = require('blob');\r\nvar URL = global.URL || global.webkitURL || global.mozURL;\r\n\r\nfunction BlobStream() {\r\n  if (!(this instanceof BlobStream))\r\n    return new BlobStream;\r\n    \r\n  WritableStream.call(this);\r\n  this._chunks = [];\r\n  this._blob = null;\r\n  this.length = 0;\r\n}\r\n\r\nutil.inherits(BlobStream, WritableStream);\r\n\r\nBlobStream.prototype._write = function(chunk, encoding, callback) {\r\n  // convert chunks to Uint8Arrays (e.g. Buffer when array fallback is being used)\r\n  if (!(chunk instanceof Uint8Array))\r\n    chunk = new Uint8Array(chunk);\r\n    \r\n  this.length += chunk.length;\r\n  this._chunks.push(chunk);\r\n  callback();\r\n};\r\n\r\nBlobStream.prototype.toBlob = function(type) {\r\n  type = type || 'application/octet-stream';\r\n  \r\n  // cache the blob if needed\r\n  if (!this._blob) {\r\n    this._blob = new Blob(this._chunks, {\r\n      type: type\r\n    });\r\n    \r\n    this._chunks = []; // free memory\r\n  }\r\n  \r\n  // if the cached blob's type doesn't match the requested type, make a new blob\r\n  if (this._blob.type !== type)\r\n    this._blob = new Blob([this._blob], { type: type });\r\n  \r\n  return this._blob;\r\n};\r\n\r\nBlobStream.prototype.toBlobURL = function(type) {\r\n  return URL.createObjectURL(this.toBlob(type));\r\n};\r\n\r\nmodule.exports = BlobStream;\r\n"]},"metadata":{},"sourceType":"script"}