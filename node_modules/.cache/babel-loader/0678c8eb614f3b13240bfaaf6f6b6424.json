{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Repositories/starter-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/unstable_useId';\nvar RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  var actions = props.actions,\n      children = props.children,\n      nameProp = props.name,\n      valueProp = props.value,\n      onChange = props.onChange,\n      other = _objectWithoutPropertiesLoose(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  var rootRef = React.useRef(null);\n\n  var _useControlled = useControlled({\n    controlled: valueProp,\n    default: props.defaultValue,\n    name: 'RadioGroup'\n  }),\n      _useControlled2 = _slicedToArray(_useControlled, 2),\n      value = _useControlled2[0],\n      setValue = _useControlled2[1];\n\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      var input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  var handleRef = useForkRef(ref, rootRef);\n\n  var handleChange = event => {\n    setValue(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  var name = useId(nameProp);\n  return /*#__PURE__*/React.createElement(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, _extends({\n    role: \"radiogroup\",\n    ref: handleRef\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/node_modules/@material-ui/core/es/RadioGroup/RadioGroup.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","FormGroup","useForkRef","useControlled","RadioGroupContext","useId","RadioGroup","forwardRef","props","ref","actions","children","nameProp","name","valueProp","value","onChange","other","rootRef","useRef","controlled","default","defaultValue","setValue","useImperativeHandle","focus","input","current","querySelector","handleRef","handleChange","event","target","createElement","Provider","role","process","env","NODE_ENV","propTypes","node","oneOfType","arrayOf","string","number","func","any"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport FormGroup from '../FormGroup';\nimport useForkRef from '../utils/useForkRef';\nimport useControlled from '../utils/useControlled';\nimport RadioGroupContext from './RadioGroupContext';\nimport useId from '../utils/unstable_useId';\nconst RadioGroup = /*#__PURE__*/React.forwardRef(function RadioGroup(props, ref) {\n  const {\n    // private\n    // eslint-disable-next-line react/prop-types\n    actions,\n    children,\n    name: nameProp,\n    value: valueProp,\n    onChange\n  } = props,\n        other = _objectWithoutPropertiesLoose(props, [\"actions\", \"children\", \"name\", \"value\", \"onChange\"]);\n\n  const rootRef = React.useRef(null);\n  const [value, setValue] = useControlled({\n    controlled: valueProp,\n    default: props.defaultValue,\n    name: 'RadioGroup'\n  });\n  React.useImperativeHandle(actions, () => ({\n    focus: () => {\n      let input = rootRef.current.querySelector('input:not(:disabled):checked');\n\n      if (!input) {\n        input = rootRef.current.querySelector('input:not(:disabled)');\n      }\n\n      if (input) {\n        input.focus();\n      }\n    }\n  }), []);\n  const handleRef = useForkRef(ref, rootRef);\n\n  const handleChange = event => {\n    setValue(event.target.value);\n\n    if (onChange) {\n      onChange(event, event.target.value);\n    }\n  };\n\n  const name = useId(nameProp);\n  return /*#__PURE__*/React.createElement(RadioGroupContext.Provider, {\n    value: {\n      name,\n      onChange: handleChange,\n      value\n    }\n  }, /*#__PURE__*/React.createElement(FormGroup, _extends({\n    role: \"radiogroup\",\n    ref: handleRef\n  }, other), children));\n});\nprocess.env.NODE_ENV !== \"production\" ? RadioGroup.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * The default `input` element value. Use when the component is not controlled.\n   */\n  defaultValue: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.string), PropTypes.number, PropTypes.string]),\n\n  /**\n   * The name used to reference the value of the control.\n   * If you don't provide this prop, it falls back to a randomly generated name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * Callback fired when a radio button is selected.\n   *\n   * @param {object} event The event source of the callback.\n   * You can pull out the new value by accessing `event.target.value` (string).\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * Value of the selected radio button. The DOM API casts this to a string.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default RadioGroup;"]},"metadata":{},"sourceType":"module"}