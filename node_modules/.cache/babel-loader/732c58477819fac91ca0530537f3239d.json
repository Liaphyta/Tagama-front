{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport { getThemeProps, useTheme } from '@material-ui/styles';\nexport default function useMediaQuery(queryInput, options = {}) {\n  var theme = useTheme();\n  var props = getThemeProps({\n    theme,\n    name: 'MuiUseMediaQuery',\n    props: {}\n  });\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (typeof queryInput === 'function' && theme === null) {\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\n    }\n  }\n\n  var query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\n  // All the browsers Material-UI support have this built-in.\n  // This defensive check is here for simplicity.\n  // Most of the time, the match media logic isn't central to people tests.\n\n  var supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\n\n  var _extends2 = _extends({}, props, options),\n      _extends2$defaultMatc = _extends2.defaultMatches,\n      defaultMatches = _extends2$defaultMatc === void 0 ? false : _extends2$defaultMatc,\n      _extends2$matchMedia = _extends2.matchMedia,\n      matchMedia = _extends2$matchMedia === void 0 ? supportMatchMedia ? window.matchMedia : null : _extends2$matchMedia,\n      _extends2$noSsr = _extends2.noSsr,\n      noSsr = _extends2$noSsr === void 0 ? false : _extends2$noSsr,\n      _extends2$ssrMatchMed = _extends2.ssrMatchMedia,\n      ssrMatchMedia = _extends2$ssrMatchMed === void 0 ? null : _extends2$ssrMatchMed;\n\n  var _React$useState = React.useState(() => {\n    if (noSsr && supportMatchMedia) {\n      return matchMedia(query).matches;\n    }\n\n    if (ssrMatchMedia) {\n      return ssrMatchMedia(query).matches;\n    } // Once the component is mounted, we rely on the\n    // event listeners to return the correct matches value.\n\n\n    return defaultMatches;\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      match = _React$useState2[0],\n      setMatch = _React$useState2[1];\n\n  React.useEffect(() => {\n    var active = true;\n\n    if (!supportMatchMedia) {\n      return undefined;\n    }\n\n    var queryList = matchMedia(query);\n\n    var updateMatch = () => {\n      // Workaround Safari wrong implementation of matchMedia\n      // TODO can we remove it?\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\n      if (active) {\n        setMatch(queryList.matches);\n      }\n    };\n\n    updateMatch();\n    queryList.addListener(updateMatch);\n    return () => {\n      active = false;\n      queryList.removeListener(updateMatch);\n    };\n  }, [query, matchMedia, supportMatchMedia]);\n\n  if (process.env.NODE_ENV !== 'production') {\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue({\n      query,\n      match\n    });\n  }\n\n  return match;\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/useMediaQuery/useMediaQuery.js"],"names":["_extends","React","getThemeProps","useTheme","useMediaQuery","queryInput","options","theme","props","name","process","env","NODE_ENV","console","error","join","query","replace","supportMatchMedia","window","matchMedia","defaultMatches","noSsr","ssrMatchMedia","useState","matches","match","setMatch","useEffect","active","undefined","queryList","updateMatch","addListener","removeListener","useDebugValue"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport * as React from 'react';\r\nimport { getThemeProps, useTheme } from '@material-ui/styles';\r\nexport default function useMediaQuery(queryInput, options = {}) {\r\n  const theme = useTheme();\r\n  const props = getThemeProps({\r\n    theme,\r\n    name: 'MuiUseMediaQuery',\r\n    props: {}\r\n  });\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (typeof queryInput === 'function' && theme === null) {\r\n      console.error(['Material-UI: The `query` argument provided is invalid.', 'You are providing a function without a theme in the context.', 'One of the parent elements needs to use a ThemeProvider.'].join('\\n'));\r\n    }\r\n  }\r\n\r\n  let query = typeof queryInput === 'function' ? queryInput(theme) : queryInput;\r\n  query = query.replace(/^@media( ?)/m, ''); // Wait for jsdom to support the match media feature.\r\n  // All the browsers Material-UI support have this built-in.\r\n  // This defensive check is here for simplicity.\r\n  // Most of the time, the match media logic isn't central to people tests.\r\n\r\n  const supportMatchMedia = typeof window !== 'undefined' && typeof window.matchMedia !== 'undefined';\r\n\r\n  const {\r\n    defaultMatches = false,\r\n    matchMedia = supportMatchMedia ? window.matchMedia : null,\r\n    noSsr = false,\r\n    ssrMatchMedia = null\r\n  } = _extends({}, props, options);\r\n\r\n  const [match, setMatch] = React.useState(() => {\r\n    if (noSsr && supportMatchMedia) {\r\n      return matchMedia(query).matches;\r\n    }\r\n\r\n    if (ssrMatchMedia) {\r\n      return ssrMatchMedia(query).matches;\r\n    } // Once the component is mounted, we rely on the\r\n    // event listeners to return the correct matches value.\r\n\r\n\r\n    return defaultMatches;\r\n  });\r\n  React.useEffect(() => {\r\n    let active = true;\r\n\r\n    if (!supportMatchMedia) {\r\n      return undefined;\r\n    }\r\n\r\n    const queryList = matchMedia(query);\r\n\r\n    const updateMatch = () => {\r\n      // Workaround Safari wrong implementation of matchMedia\r\n      // TODO can we remove it?\r\n      // https://github.com/mui-org/material-ui/pull/17315#issuecomment-528286677\r\n      if (active) {\r\n        setMatch(queryList.matches);\r\n      }\r\n    };\r\n\r\n    updateMatch();\r\n    queryList.addListener(updateMatch);\r\n    return () => {\r\n      active = false;\r\n      queryList.removeListener(updateMatch);\r\n    };\r\n  }, [query, matchMedia, supportMatchMedia]);\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    // eslint-disable-next-line react-hooks/rules-of-hooks\r\n    React.useDebugValue({\r\n      query,\r\n      match\r\n    });\r\n  }\r\n\r\n  return match;\r\n}"]},"metadata":{},"sourceType":"module"}