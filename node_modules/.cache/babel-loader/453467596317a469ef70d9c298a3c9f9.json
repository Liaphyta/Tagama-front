{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\r\n * Slice glyph between codePoints range\r\n * Util for breaking ligatures\r\n *\r\n * @param  {number}  start code point index\r\n * @param  {number}  end code point index\r\n * @param  {Object}  font to generate new glyph\r\n * @param  {Object} glyph to be sliced\r\n * @return {Array} sliced glyph parts\r\n */\n\n\nvar slice = function slice(start, end, font, glyph) {\n  if (!glyph) return [];\n  if (start === end) return [];\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\n  var codePoints = R.slice(start, end, glyph.codePoints);\n  var string = String.fromCodePoint.apply(String, codePoints);\n  return font ? font.layout(string).glyphs : [glyph];\n};\n\nvar _default = R.curryN(4, slice);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@react-pdf/textkit/glyph/slice.js"],"names":["_interopRequireWildcard","require","exports","__esModule","R","slice","start","end","font","glyph","codePoints","length","string","String","fromCodePoint","apply","layout","glyphs","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGJ,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,KAAK,GAAG,SAASA,KAAT,CAAeC,KAAf,EAAsBC,GAAtB,EAA2BC,IAA3B,EAAiCC,KAAjC,EAAwC;AAClD,MAAI,CAACA,KAAL,EAAY,OAAO,EAAP;AACZ,MAAIH,KAAK,KAAKC,GAAd,EAAmB,OAAO,EAAP;AACnB,MAAID,KAAK,KAAK,CAAV,IAAeC,GAAG,KAAKE,KAAK,CAACC,UAAN,CAAiBC,MAA5C,EAAoD,OAAO,CAACF,KAAD,CAAP;AACpD,MAAIC,UAAU,GAAGN,CAAC,CAACC,KAAF,CAAQC,KAAR,EAAeC,GAAf,EAAoBE,KAAK,CAACC,UAA1B,CAAjB;AACA,MAAIE,MAAM,GAAGC,MAAM,CAACC,aAAP,CAAqBC,KAArB,CAA2BF,MAA3B,EAAmCH,UAAnC,CAAb;AACA,SAAOF,IAAI,GAAGA,IAAI,CAACQ,MAAL,CAAYJ,MAAZ,EAAoBK,MAAvB,GAAgC,CAACR,KAAD,CAA3C;AACD,CAPD;;AASA,IAAIS,QAAQ,GAAGd,CAAC,CAACe,MAAF,CAAS,CAAT,EAAYd,KAAZ,CAAf;;AAEAH,OAAO,CAAC,SAAD,CAAP,GAAqBgB,QAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nexports.__esModule = true;\r\nexports[\"default\"] = void 0;\r\n\r\nvar R = _interopRequireWildcard(require(\"ramda\"));\r\n\r\n/**\r\n * Slice glyph between codePoints range\r\n * Util for breaking ligatures\r\n *\r\n * @param  {number}  start code point index\r\n * @param  {number}  end code point index\r\n * @param  {Object}  font to generate new glyph\r\n * @param  {Object} glyph to be sliced\r\n * @return {Array} sliced glyph parts\r\n */\r\nvar slice = function slice(start, end, font, glyph) {\r\n  if (!glyph) return [];\r\n  if (start === end) return [];\r\n  if (start === 0 && end === glyph.codePoints.length) return [glyph];\r\n  var codePoints = R.slice(start, end, glyph.codePoints);\r\n  var string = String.fromCodePoint.apply(String, codePoints);\r\n  return font ? font.layout(string).glyphs : [glyph];\r\n};\r\n\r\nvar _default = R.curryN(4, slice);\r\n\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}