{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\src\\\\app\\\\module\\\\settings\\\\system_settings.container.js\";\nimport React from 'react';\nimport { fetchAllSystemSettingsProps, updateSystemSettingsProp } from './settings.repo';\nimport { FormControlLabel, Grid, Paper, Switch, Table, TableCell, TableRow, TextField } from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { authorize, handleLogout, hasRole, refreshToken } from '../../shared/app.properties';\nimport Redirect from 'react-router/Redirect';\n\nvar SystemSettingsContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(SystemSettingsContainer, _React$Component);\n\n  function SystemSettingsContainer() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, SystemSettingsContainer);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(SystemSettingsContainer)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.unauthorized = false;\n    _this.state = {\n      settingsMap: undefined\n    };\n\n    _this.fetchAllSettingsProps = function () {\n      fetchAllSystemSettingsProps({}).then(function (res) {\n        _this.setState({\n          asd: 'asd'\n        });\n\n        var tmpmap = [];\n\n        for (var i = 0; i < res.data.length; i++) {\n          tmpmap[res.data[i].key] = res.data[i].value;\n        }\n\n        _this.setState({\n          settingsMap: tmpmap\n        });\n      }).catch(function (err) {});\n    };\n\n    _this.handleExportEncryptionChange = function (event, MAIN_SEARCH_ZIP_ENCRYPT_ENABLED) {\n      var encBool = 'false';\n\n      if (MAIN_SEARCH_ZIP_ENCRYPT_ENABLED) {\n        encBool = 'true';\n      }\n\n      var tmpmap = _this.state.settingsMap;\n      updateSystemSettingsProp({\n        key: 'MAIN_SEARCH_ZIP_ENCRYPT_ENABLED',\n        val: encBool\n      }).then(function (res) {\n        tmpmap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED = res.data.value;\n\n        _this.setState({\n          settingsMap: tmpmap\n        });\n      }).catch(function (err) {});\n    };\n\n    _this.handleSmsNotificationsEnabledChange = function (event, SMS_NOTIFICATIONS_ENABLED) {\n      var encBool = 'false';\n\n      if (SMS_NOTIFICATIONS_ENABLED) {\n        encBool = 'true';\n      }\n\n      var tmpmap = _this.state.settingsMap;\n      updateSystemSettingsProp({\n        key: 'SMS_NOTIFICATIONS_ENABLED',\n        val: encBool\n      }).then(function (res) {\n        tmpmap.SMS_NOTIFICATIONS_ENABLED = res.data.value;\n\n        _this.setState({\n          settingsMap: tmpmap\n        });\n      }).catch(function (err) {});\n    };\n\n    _this.handleEmailNotificationsEnabledChange = function (event, EMAIL_NOTIFICATIONS_ENABLED) {\n      var encBool = 'false';\n\n      if (EMAIL_NOTIFICATIONS_ENABLED) {\n        encBool = 'true';\n      }\n\n      var tmpmap = _this.state.settingsMap;\n      updateSystemSettingsProp({\n        key: 'EMAIL_NOTIFICATIONS_ENABLED',\n        val: encBool\n      }).then(function (res) {\n        tmpmap.EMAIL_NOTIFICATIONS_ENABLED = res.data.value;\n\n        _this.setState({\n          settingsMap: tmpmap\n        });\n      }).catch(function (err) {});\n    };\n\n    _this.handleFormChange = function (name) {\n      return function (event) {\n        var tmpmap = _this.state.settingsMap;\n        updateSystemSettingsProp({\n          key: name,\n          val: event.target.value\n        }).then(function (res) {\n          tmpmap[name] = res.data.value;\n\n          _this.setState({\n            settingsMap: tmpmap\n          });\n        }).catch(function (err) {});\n      };\n    };\n\n    return _this;\n  }\n\n  _createClass(SystemSettingsContainer, [{\n    key: \"componentWillMount\",\n    value: function componentWillMount() {\n      this.unauthorized = !hasRole('ROLE_ADMINISTRATION');\n      var refreshTime = new Date();\n      refreshTime.setSeconds(refreshTime.getSeconds() + 1800);\n\n      if (!localStorage.getItem('idm') || !localStorage.getItem('me')) {\n        handleLogout();\n      } else if (localStorage.getItem('idm') && new Date(JSON.parse(localStorage.getItem('idm')).expires_at) < new Date()) {\n        handleLogout();\n      } else if (localStorage.getItem('idm') && new Date(JSON.parse(localStorage.getItem('idm')).expires_at) < refreshTime) {\n        refreshToken();\n      }\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.fetchAllSettingsProps();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"my-profile\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 121\n        },\n        __self: this\n      }, localStorage.getItem('idm') && localStorage.getItem('me') && this.unauthorized && React.createElement(Redirect, {\n        to: \"/app/error/unauthorized\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(Grid, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginLeft: 30 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, \"SYSTEM SETTINGS\"), React.createElement(Paper, {\n        style: {\n          marginLeft: 30 + \"px\",\n          marginRight: 30 + 'px',\n          padding: 10 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131\n        },\n        __self: this\n      }, this.state.settingsMap && React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, \"Main search export encrypt enabled\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: this.state.settingsMap && this.state.settingsMap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED && this.state.settingsMap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED == \"true\",\n          onChange: this.handleExportEncryptionChange,\n          value: \"MAIN_SEARCH_ZIP_ENCRYPT_ENABLED\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 140\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 153\n        },\n        __self: this\n      }, \"SMS notifications enabled\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: this.state.settingsMap && this.state.settingsMap.SMS_NOTIFICATIONS_ENABLED && this.state.settingsMap.SMS_NOTIFICATIONS_ENABLED == \"true\",\n          onChange: this.handleSmsNotificationsEnabledChange,\n          value: \"SMS_NOTIFICATIONS_ENABLED\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 157\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 170\n        },\n        __self: this\n      }, \"Email notifications enabled\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(FormControlLabel, {\n        control: React.createElement(Switch, {\n          checked: this.state.settingsMap && this.state.settingsMap.EMAIL_NOTIFICATIONS_ENABLED && this.state.settingsMap.EMAIL_NOTIFICATIONS_ENABLED == \"true\",\n          onChange: this.handleEmailNotificationsEnabledChange,\n          value: \"EMAIL_NOTIFICATIONS_ENABLED\",\n          color: \"primary\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 174\n          },\n          __self: this\n        }),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      })))))), React.createElement(Grid, {\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 192\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginLeft: 30 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 193\n        },\n        __self: this\n      }, \"SMPP PARAMETERS\"), React.createElement(Paper, {\n        style: {\n          marginLeft: 30 + \"px\",\n          marginRight: 30 + 'px',\n          padding: 10 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 194\n        },\n        __self: this\n      }, this.state.settingsMap && React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 196\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 197\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 198\n        },\n        __self: this\n      }, \"SMPP Host\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smppHost\",\n        onChange: this.handleFormChange('SMPP_HOST'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMPP_HOST ? this.state.settingsMap.SMPP_HOST : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }, \"SMPP Port\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 211\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smppPort\",\n        onChange: this.handleFormChange('SMPP_PORT'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMPP_PORT ? this.state.settingsMap.SMPP_PORT : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 212\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        },\n        __self: this\n      }, \"SMPP Username\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smppUsername\",\n        onChange: this.handleFormChange('SMPP_USERNAME'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMPP_USERNAME ? this.state.settingsMap.SMPP_USERNAME : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 224\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 233\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 234\n        },\n        __self: this\n      }, \"SMPP Password\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smppPassword\",\n        onChange: this.handleFormChange('SMPP_PASSWORD'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMPP_PASSWORD ? this.state.settingsMap.SMPP_PASSWORD : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 236\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 245\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 246\n        },\n        __self: this\n      }, \"MSISDN\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 247\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smppMsisdn\",\n        onChange: this.handleFormChange('SMPP_MSISDN'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMPP_MSISDN ? this.state.settingsMap.SMPP_MSISDN : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 248\n        },\n        __self: this\n      })))))), React.createElement(Grid, {\n        xs: 6,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 262\n        },\n        __self: this\n      }, React.createElement(\"h3\", {\n        style: {\n          marginLeft: 30 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 263\n        },\n        __self: this\n      }, \"SMTP PARAMETERS\"), React.createElement(Paper, {\n        style: {\n          marginLeft: 30 + \"px\",\n          marginRight: 30 + 'px',\n          padding: 10 + 'px'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 264\n        },\n        __self: this\n      }, this.state.settingsMap && React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 266\n        },\n        __self: this\n      }, React.createElement(Table, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 267\n        },\n        __self: this\n      }, React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 268\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269\n        },\n        __self: this\n      }, \"SMTP Host\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 270\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smtpHost\",\n        onChange: this.handleFormChange('SMTP_HOST'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMTP_HOST ? this.state.settingsMap.SMTP_HOST : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 271\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 280\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281\n        },\n        __self: this\n      }, \"SMTP Port\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smtpPort\",\n        onChange: this.handleFormChange('SMTP_PORT'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMTP_PORT ? this.state.settingsMap.SMTP_PORT : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 283\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 292\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 293\n        },\n        __self: this\n      }, \"SMTP Username\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smtpUsername\",\n        onChange: this.handleFormChange('SMTP_USERNAME'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMTP_USERNAME ? this.state.settingsMap.SMTP_USERNAME : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 295\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 304\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 305\n        },\n        __self: this\n      }, \"SMTP Password\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 306\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smtpPassword\",\n        onChange: this.handleFormChange('SMTP_PASSWORD'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMTP_PASSWORD ? this.state.settingsMap.SMTP_PASSWORD : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307\n        },\n        __self: this\n      }))), React.createElement(TableRow, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316\n        },\n        __self: this\n      }, React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 317\n        },\n        __self: this\n      }, \"SMTP Sender address\"), React.createElement(TableCell, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 318\n        },\n        __self: this\n      }, React.createElement(TextField, {\n        id: \"smtpSender\",\n        onChange: this.handleFormChange('SMTP_SENDER_ADDRESS'),\n        fullWidth: true,\n        value: this.state.settingsMap.SMTP_SENDER_ADDRESS ? this.state.settingsMap.SMTP_SENDER_ADDRESS : '',\n        margin: \"normal\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 319\n        },\n        __self: this\n      })))))), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 332\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return SystemSettingsContainer;\n}(React.Component);\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    allusersdata: undefined\n  };\n};\n\nexport default connect(mapStateToProps, {})(SystemSettingsContainer);","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/src/app/module/settings/system_settings.container.js"],"names":["React","fetchAllSystemSettingsProps","updateSystemSettingsProp","FormControlLabel","Grid","Paper","Switch","Table","TableCell","TableRow","TextField","connect","authorize","handleLogout","hasRole","refreshToken","Redirect","SystemSettingsContainer","unauthorized","state","settingsMap","undefined","fetchAllSettingsProps","then","res","setState","asd","tmpmap","i","data","length","key","value","catch","err","handleExportEncryptionChange","event","MAIN_SEARCH_ZIP_ENCRYPT_ENABLED","encBool","val","handleSmsNotificationsEnabledChange","SMS_NOTIFICATIONS_ENABLED","handleEmailNotificationsEnabledChange","EMAIL_NOTIFICATIONS_ENABLED","handleFormChange","name","target","refreshTime","Date","setSeconds","getSeconds","localStorage","getItem","JSON","parse","expires_at","marginLeft","marginRight","padding","SMPP_HOST","SMPP_PORT","SMPP_USERNAME","SMPP_PASSWORD","SMPP_MSISDN","SMTP_HOST","SMTP_PORT","SMTP_USERNAME","SMTP_PASSWORD","SMTP_SENDER_ADDRESS","Component","mapStateToProps","allusersdata"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {fetchAllSystemSettingsProps, updateSystemSettingsProp} from './settings.repo';\r\nimport {FormControlLabel, Grid, Paper, Switch, Table, TableCell, TableRow, TextField} from '@material-ui/core';\r\nimport {connect} from 'react-redux';\r\nimport {authorize, handleLogout, hasRole, refreshToken} from '../../shared/app.properties';\r\nimport Redirect from 'react-router/Redirect';\r\n\r\nclass SystemSettingsContainer extends React.Component {\r\n\r\n    unauthorized = false;\r\n\r\n    state = {\r\n        settingsMap: undefined\r\n    }\r\n\r\n    componentWillMount() {\r\n        this.unauthorized = !hasRole('ROLE_ADMINISTRATION');\r\n\r\n        let refreshTime = new Date();\r\n        refreshTime.setSeconds(refreshTime.getSeconds() + 1800);\r\n\r\n        if (!localStorage.getItem('idm') || !localStorage.getItem('me')) {\r\n            handleLogout()\r\n        } else if (localStorage.getItem('idm') && new Date(JSON.parse(localStorage.getItem('idm')).expires_at) < new Date()) {\r\n            handleLogout()\r\n        } else if (localStorage.getItem('idm') && new Date(JSON.parse(localStorage.getItem('idm')).expires_at) < refreshTime) {\r\n            refreshToken()\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        this.fetchAllSettingsProps();\r\n    }\r\n\r\n    fetchAllSettingsProps = () => {\r\n        fetchAllSystemSettingsProps({}).then(res => {\r\n\r\n            this.setState({\r\n                asd: 'asd'\r\n            });\r\n\r\n            var tmpmap = [];\r\n            for (var i = 0; i < res.data.length; i++) {\r\n                tmpmap[res.data[i].key] = res.data[i].value;\r\n            }\r\n            this.setState({\r\n                settingsMap: tmpmap\r\n            });\r\n\r\n        }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    handleExportEncryptionChange = (event, MAIN_SEARCH_ZIP_ENCRYPT_ENABLED) => {\r\n        var encBool = 'false';\r\n        if (MAIN_SEARCH_ZIP_ENCRYPT_ENABLED) {\r\n            encBool = 'true';   \r\n        }\r\n        var tmpmap = this.state.settingsMap;\r\n        updateSystemSettingsProp({ key: 'MAIN_SEARCH_ZIP_ENCRYPT_ENABLED', val: encBool })\r\n            .then(res => {\r\n                tmpmap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED = res.data.value;\r\n                this.setState({\r\n                    settingsMap: tmpmap\r\n                })\r\n            }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    handleSmsNotificationsEnabledChange = (event, SMS_NOTIFICATIONS_ENABLED) => {\r\n        var encBool = 'false';\r\n        if (SMS_NOTIFICATIONS_ENABLED) {\r\n            encBool = 'true';\r\n        }\r\n        var tmpmap = this.state.settingsMap;\r\n        updateSystemSettingsProp({key: 'SMS_NOTIFICATIONS_ENABLED', val: encBool})\r\n            .then(res => {\r\n                tmpmap.SMS_NOTIFICATIONS_ENABLED = res.data.value;\r\n                this.setState({\r\n                    settingsMap: tmpmap\r\n                })\r\n            }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    handleEmailNotificationsEnabledChange = (event, EMAIL_NOTIFICATIONS_ENABLED) => {\r\n        var encBool = 'false';\r\n        if (EMAIL_NOTIFICATIONS_ENABLED) {\r\n            encBool = 'true';\r\n        }\r\n        var tmpmap = this.state.settingsMap;\r\n        updateSystemSettingsProp({key: 'EMAIL_NOTIFICATIONS_ENABLED', val: encBool})\r\n            .then(res => {\r\n                tmpmap.EMAIL_NOTIFICATIONS_ENABLED = res.data.value;\r\n                this.setState({\r\n                    settingsMap: tmpmap\r\n                })\r\n            }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    handleFormChange = name => event => {\r\n        let tmpmap = this.state.settingsMap;\r\n        updateSystemSettingsProp({key: name, val: event.target.value})\r\n            .then(res => {\r\n                tmpmap[name] = res.data.value;\r\n                this.setState({\r\n                    settingsMap: tmpmap\r\n                })\r\n            }).catch(err => {\r\n\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"my-profile\">\r\n\r\n                {localStorage.getItem('idm') && localStorage.getItem('me') && this.unauthorized &&\r\n                <Redirect to=\"/app/error/unauthorized\"/>\r\n                }\r\n\r\n                <Grid>\r\n                    <Grid xs={6}>\r\n                        <h3 style={{ marginLeft: 30 + 'px' }}>SYSTEM SETTINGS</h3>\r\n\r\n                        <Paper style={{ marginLeft: 30 + \"px\", marginRight: 30 + 'px', padding: 10 + 'px' }}>\r\n\r\n                            {this.state.settingsMap &&\r\n                                <Table>\r\n                                    <TableRow>\r\n                                        <TableCell>Main search export encrypt enabled</TableCell>\r\n                                        <TableCell>\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Switch\r\n                                                        checked={this.state.settingsMap &&\r\n                                                            this.state.settingsMap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED &&\r\n                                                            this.state.settingsMap.MAIN_SEARCH_ZIP_ENCRYPT_ENABLED == \"true\"}\r\n                                                        onChange={this.handleExportEncryptionChange}\r\n                                                        value=\"MAIN_SEARCH_ZIP_ENCRYPT_ENABLED\"\r\n                                                        color=\"primary\"\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>SMS notifications enabled</TableCell>\r\n                                        <TableCell>\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Switch\r\n                                                        checked={this.state.settingsMap &&\r\n                                                        this.state.settingsMap.SMS_NOTIFICATIONS_ENABLED &&\r\n                                                        this.state.settingsMap.SMS_NOTIFICATIONS_ENABLED == \"true\"}\r\n                                                        onChange={this.handleSmsNotificationsEnabledChange}\r\n                                                        value=\"SMS_NOTIFICATIONS_ENABLED\"\r\n                                                        color=\"primary\"\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>Email notifications enabled</TableCell>\r\n                                        <TableCell>\r\n                                            <FormControlLabel\r\n                                                control={\r\n                                                    <Switch\r\n                                                        checked={this.state.settingsMap &&\r\n                                                        this.state.settingsMap.EMAIL_NOTIFICATIONS_ENABLED &&\r\n                                                        this.state.settingsMap.EMAIL_NOTIFICATIONS_ENABLED == \"true\"}\r\n                                                        onChange={this.handleEmailNotificationsEnabledChange}\r\n                                                        value=\"EMAIL_NOTIFICATIONS_ENABLED\"\r\n                                                        color=\"primary\"\r\n                                                    />\r\n                                                }\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </Table>\r\n                            }\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n\r\n                    <Grid xs={6}>\r\n                        <h3 style={{marginLeft: 30 + 'px'}}>SMPP PARAMETERS</h3>\r\n                        <Paper style={{marginLeft: 30 + \"px\", marginRight: 30 + 'px', padding: 10 + 'px'}}>\r\n                            {this.state.settingsMap &&\r\n                            <Table>\r\n                                <TableRow>\r\n                                    <TableCell>SMPP Host</TableCell>\r\n                                    <TableCell>\r\n                                        <TextField\r\n                                            id=\"smppHost\"\r\n                                            onChange={this.handleFormChange('SMPP_HOST')}\r\n                                            fullWidth={true}\r\n                                            value={this.state.settingsMap.SMPP_HOST ? this.state.settingsMap.SMPP_HOST : ''}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>SMPP Port</TableCell>\r\n                                    <TableCell>\r\n                                        <TextField\r\n                                            id=\"smppPort\"\r\n                                            onChange={this.handleFormChange('SMPP_PORT')}\r\n                                            fullWidth={true}\r\n                                            value={this.state.settingsMap.SMPP_PORT ? this.state.settingsMap.SMPP_PORT : ''}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>SMPP Username</TableCell>\r\n                                    <TableCell>\r\n                                        <TextField\r\n                                            id=\"smppUsername\"\r\n                                            onChange={this.handleFormChange('SMPP_USERNAME')}\r\n                                            fullWidth={true}\r\n                                            value={this.state.settingsMap.SMPP_USERNAME ? this.state.settingsMap.SMPP_USERNAME : ''}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>SMPP Password</TableCell>\r\n                                    <TableCell>\r\n                                        <TextField\r\n                                            id=\"smppPassword\"\r\n                                            onChange={this.handleFormChange('SMPP_PASSWORD')}\r\n                                            fullWidth={true}\r\n                                            value={this.state.settingsMap.SMPP_PASSWORD ? this.state.settingsMap.SMPP_PASSWORD : ''}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                                <TableRow>\r\n                                    <TableCell>MSISDN</TableCell>\r\n                                    <TableCell>\r\n                                        <TextField\r\n                                            id=\"smppMsisdn\"\r\n                                            onChange={this.handleFormChange('SMPP_MSISDN')}\r\n                                            fullWidth={true}\r\n                                            value={this.state.settingsMap.SMPP_MSISDN ? this.state.settingsMap.SMPP_MSISDN : ''}\r\n                                            margin=\"normal\"\r\n                                        />\r\n                                    </TableCell>\r\n                                </TableRow>\r\n                            </Table>\r\n                            }\r\n                        </Paper>\r\n                    </Grid>\r\n\r\n                    <Grid xs={6}>\r\n                        <h3 style={{marginLeft: 30 + 'px'}}>SMTP PARAMETERS</h3>\r\n                        <Paper style={{marginLeft: 30 + \"px\", marginRight: 30 + 'px', padding: 10 + 'px'}}>\r\n                            {this.state.settingsMap &&\r\n                            <div>\r\n                                <Table>\r\n                                    <TableRow>\r\n                                        <TableCell>SMTP Host</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                id=\"smtpHost\"\r\n                                                onChange={this.handleFormChange('SMTP_HOST')}\r\n                                                fullWidth={true}\r\n                                                value={this.state.settingsMap.SMTP_HOST ? this.state.settingsMap.SMTP_HOST : ''}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>SMTP Port</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                id=\"smtpPort\"\r\n                                                onChange={this.handleFormChange('SMTP_PORT')}\r\n                                                fullWidth={true}\r\n                                                value={this.state.settingsMap.SMTP_PORT ? this.state.settingsMap.SMTP_PORT : ''}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>SMTP Username</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                id=\"smtpUsername\"\r\n                                                onChange={this.handleFormChange('SMTP_USERNAME')}\r\n                                                fullWidth={true}\r\n                                                value={this.state.settingsMap.SMTP_USERNAME ? this.state.settingsMap.SMTP_USERNAME : ''}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>SMTP Password</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                id=\"smtpPassword\"\r\n                                                onChange={this.handleFormChange('SMTP_PASSWORD')}\r\n                                                fullWidth={true}\r\n                                                value={this.state.settingsMap.SMTP_PASSWORD ? this.state.settingsMap.SMTP_PASSWORD : ''}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                    <TableRow>\r\n                                        <TableCell>SMTP Sender address</TableCell>\r\n                                        <TableCell>\r\n                                            <TextField\r\n                                                id=\"smtpSender\"\r\n                                                onChange={this.handleFormChange('SMTP_SENDER_ADDRESS')}\r\n                                                fullWidth={true}\r\n                                                value={this.state.settingsMap.SMTP_SENDER_ADDRESS ? this.state.settingsMap.SMTP_SENDER_ADDRESS : ''}\r\n                                                margin=\"normal\"\r\n                                            />\r\n                                        </TableCell>\r\n                                    </TableRow>\r\n                                </Table>\r\n                            </div>\r\n                            }\r\n                        </Paper>\r\n                        <br/><br/>\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        allusersdata: undefined\r\n    }\r\n};\r\n\r\nexport default connect(mapStateToProps, ({\r\n\r\n}))(SystemSettingsContainer);\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}