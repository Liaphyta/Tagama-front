{"ast":null,"code":"import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\"; // Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\n// to learn the context in which each easing should be used.\n\nexport var easing = {\n  // This is the most common easing curve.\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\n  // Objects enter the screen at full velocity from off-screen and\n  // slowly decelerate to a resting point.\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\n  // The sharp curve is used by objects that may return to the screen at any time.\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\n// to learn when use what timing\n\nexport var duration = {\n  shortest: 150,\n  shorter: 200,\n  short: 250,\n  // most basic recommended timing\n  standard: 300,\n  // this is to be used in complex animations\n  complex: 375,\n  // recommended when something is entering screen\n  enteringScreen: 225,\n  // recommended when something is leaving screen\n  leavingScreen: 195\n};\n\nfunction formatMs(milliseconds) {\n  return \"\".concat(Math.round(milliseconds), \"ms\");\n}\n/**\r\n * @param {string|Array} props\r\n * @param {object} param\r\n * @param {string} param.prop\r\n * @param {number} param.duration\r\n * @param {string} param.easing\r\n * @param {number} param.delay\r\n */\n\n\nexport default {\n  easing,\n  duration,\n  create: (props = ['all'], options = {}) => {\n    var _options$duration = options.duration,\n        durationOption = _options$duration === void 0 ? duration.standard : _options$duration,\n        _options$easing = options.easing,\n        easingOption = _options$easing === void 0 ? easing.easeInOut : _options$easing,\n        _options$delay = options.delay,\n        delay = _options$delay === void 0 ? 0 : _options$delay,\n        other = _objectWithoutPropertiesLoose(options, [\"duration\", \"easing\", \"delay\"]);\n\n    if (process.env.NODE_ENV !== 'production') {\n      var isString = value => typeof value === 'string';\n\n      var isNumber = value => !isNaN(parseFloat(value));\n\n      if (!isString(props) && !Array.isArray(props)) {\n        console.error('Material-UI: Argument \"props\" must be a string or Array.');\n      }\n\n      if (!isNumber(durationOption) && !isString(durationOption)) {\n        console.error(\"Material-UI: Argument \\\"duration\\\" must be a number or a string but found \".concat(durationOption, \".\"));\n      }\n\n      if (!isString(easingOption)) {\n        console.error('Material-UI: Argument \"easing\" must be a string.');\n      }\n\n      if (!isNumber(delay) && !isString(delay)) {\n        console.error('Material-UI: Argument \"delay\" must be a number or a string.');\n      }\n\n      if (Object.keys(other).length !== 0) {\n        console.error(\"Material-UI: Unrecognized argument(s) [\".concat(Object.keys(other).join(','), \"].\"));\n      }\n    }\n\n    return (Array.isArray(props) ? props : [props]).map(animatedProp => \"\".concat(animatedProp, \" \").concat(typeof durationOption === 'string' ? durationOption : formatMs(durationOption), \" \").concat(easingOption, \" \").concat(typeof delay === 'string' ? delay : formatMs(delay))).join(',');\n  },\n\n  getAutoHeightDuration(height) {\n    if (!height) {\n      return 0;\n    }\n\n    var constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\n\n    return Math.round((4 + 15 * Math.pow(constant, 0.25) + constant / 5) * 10);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/styles/transitions.js"],"names":["_objectWithoutPropertiesLoose","easing","easeInOut","easeOut","easeIn","sharp","duration","shortest","shorter","short","standard","complex","enteringScreen","leavingScreen","formatMs","milliseconds","Math","round","create","props","options","durationOption","easingOption","delay","other","process","env","NODE_ENV","isString","value","isNumber","isNaN","parseFloat","Array","isArray","console","error","Object","keys","length","join","map","animatedProp","getAutoHeightDuration","height","constant"],"mappings":"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","sourcesContent":["import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\n// Follow https://material.google.com/motion/duration-easing.html#duration-easing-natural-easing-curves\r\n// to learn the context in which each easing should be used.\r\nexport const easing = {\r\n  // This is the most common easing curve.\r\n  easeInOut: 'cubic-bezier(0.4, 0, 0.2, 1)',\r\n  // Objects enter the screen at full velocity from off-screen and\r\n  // slowly decelerate to a resting point.\r\n  easeOut: 'cubic-bezier(0.0, 0, 0.2, 1)',\r\n  // Objects leave the screen at full velocity. They do not decelerate when off-screen.\r\n  easeIn: 'cubic-bezier(0.4, 0, 1, 1)',\r\n  // The sharp curve is used by objects that may return to the screen at any time.\r\n  sharp: 'cubic-bezier(0.4, 0, 0.6, 1)'\r\n}; // Follow https://material.io/guidelines/motion/duration-easing.html#duration-easing-common-durations\r\n// to learn when use what timing\r\n\r\nexport const duration = {\r\n  shortest: 150,\r\n  shorter: 200,\r\n  short: 250,\r\n  // most basic recommended timing\r\n  standard: 300,\r\n  // this is to be used in complex animations\r\n  complex: 375,\r\n  // recommended when something is entering screen\r\n  enteringScreen: 225,\r\n  // recommended when something is leaving screen\r\n  leavingScreen: 195\r\n};\r\n\r\nfunction formatMs(milliseconds) {\r\n  return `${Math.round(milliseconds)}ms`;\r\n}\r\n/**\r\n * @param {string|Array} props\r\n * @param {object} param\r\n * @param {string} param.prop\r\n * @param {number} param.duration\r\n * @param {string} param.easing\r\n * @param {number} param.delay\r\n */\r\n\r\n\r\nexport default {\r\n  easing,\r\n  duration,\r\n  create: (props = ['all'], options = {}) => {\r\n    const {\r\n      duration: durationOption = duration.standard,\r\n      easing: easingOption = easing.easeInOut,\r\n      delay = 0\r\n    } = options,\r\n          other = _objectWithoutPropertiesLoose(options, [\"duration\", \"easing\", \"delay\"]);\r\n\r\n    if (process.env.NODE_ENV !== 'production') {\r\n      const isString = value => typeof value === 'string';\r\n\r\n      const isNumber = value => !isNaN(parseFloat(value));\r\n\r\n      if (!isString(props) && !Array.isArray(props)) {\r\n        console.error('Material-UI: Argument \"props\" must be a string or Array.');\r\n      }\r\n\r\n      if (!isNumber(durationOption) && !isString(durationOption)) {\r\n        console.error(`Material-UI: Argument \"duration\" must be a number or a string but found ${durationOption}.`);\r\n      }\r\n\r\n      if (!isString(easingOption)) {\r\n        console.error('Material-UI: Argument \"easing\" must be a string.');\r\n      }\r\n\r\n      if (!isNumber(delay) && !isString(delay)) {\r\n        console.error('Material-UI: Argument \"delay\" must be a number or a string.');\r\n      }\r\n\r\n      if (Object.keys(other).length !== 0) {\r\n        console.error(`Material-UI: Unrecognized argument(s) [${Object.keys(other).join(',')}].`);\r\n      }\r\n    }\r\n\r\n    return (Array.isArray(props) ? props : [props]).map(animatedProp => `${animatedProp} ${typeof durationOption === 'string' ? durationOption : formatMs(durationOption)} ${easingOption} ${typeof delay === 'string' ? delay : formatMs(delay)}`).join(',');\r\n  },\r\n\r\n  getAutoHeightDuration(height) {\r\n    if (!height) {\r\n      return 0;\r\n    }\r\n\r\n    const constant = height / 36; // https://www.wolframalpha.com/input/?i=(4+%2B+15+*+(x+%2F+36+)+**+0.25+%2B+(x+%2F+36)+%2F+5)+*+10\r\n\r\n    return Math.round((4 + 15 * constant ** 0.25 + constant / 5) * 10);\r\n  }\r\n\r\n};"]},"metadata":{},"sourceType":"module"}