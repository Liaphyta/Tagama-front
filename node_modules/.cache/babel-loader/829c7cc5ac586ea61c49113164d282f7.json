{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\src\\\\app\\\\module\\\\Folders\\\\addPathfolder.container.js\";\nimport React from 'react';\nimport { Dialog, DialogTitle, Grid, TextField, DialogActions, Button, Select, Input, MenuItem } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { updateRegisterBook, getBooksAndRecords } from './folder.repo';\nimport { getRegisterBookById, listAllFolders } from './folder.repo';\nimport CheckboxTree from 'react-checkbox-tree';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { getBooksAndFolders } from './folder.repo';\nimport { dispatchAction } from '../../..';\nexport default class AddPathFolderContainer extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleFormInput = name => event => {\n      var formdata = this.state.data;\n      formdata[name] = event.target.value;\n      this.setState({\n        data: formdata\n      });\n    };\n\n    this.getAllFoders = () => {\n      listAllFolders().then(response => {\n        this.setState({\n          folders: response.data\n        });\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.loadRegisterBook = id => {\n      getRegisterBookById(id).then(response => {\n        this.setState({\n          data: response.data,\n          linearProgressShown: false\n        });\n        console.log(response);\n      }).catch(error => {\n        console.log(error);\n        this.setState({\n          linearProgressShown: false\n        });\n      });\n    };\n\n    this.handleUpdate = () => {\n      this.setState({\n        linearProgressShown: true\n      });\n      updateRegisterBook(this.state.data).then(response => {\n        dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_SHOW\",\n          payload: {\n            snackbarMessage: 'Successfuly updated register book ' + response.data.name,\n            snackbarType: 'success'\n          }\n        });\n        dispatchAction({\n          type: \"RELOAD ALL REGISTER BOOKS\",\n          payload: {}\n        });\n        this.setRedirect();\n      }).catch(error => {\n        console.log(error);\n      });\n    };\n\n    this.listBooksAndFolders = (type, year, name, page, size) => {\n      // console.log(this.state.formdata.registerName);\n      // console.log(this.state.formdata.registerType);\n      // console.log(this.state.formdata.registerYear);\n      dispatchAction({\n        type: \"MAIN_LINEAR_PROGRESS_SHOW\"\n      });\n      getBooksAndFolders(type, year, name, page, size).then(response => {\n        this.setState({\n          data: response\n        }, dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_HIDE\"\n        }));\n        console.log(response);\n      }).catch(error => {\n        dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_HIDE\"\n        });\n        console.log(error);\n      });\n    };\n\n    this.state = {\n      formdata: {},\n      data: {},\n      folders: [],\n      registerType: String,\n      registerName: String,\n      registerYear: String\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.match.params.id) {\n      this.loadRegisterBook(this.props.match.params.id);\n    }\n\n    var temp = this.props.location.search;\n    var array = temp.split(\"&\");\n    var registerName;\n    var registerType;\n    var registerYear;\n    var i;\n\n    for (i = 0; i < array.length; i++) {\n      var individual = array[i].split(\"=\");\n      if (i == 0) registerName = individual[1];\n      if (i == 1) registerType = individual[1];\n      if (i == 2) registerYear = individual[1];\n    }\n\n    this.setState({\n      registerName: this.registerName,\n      registerYear: this.registerYear,\n      registerType: this.registerYear\n    });\n    this.getAllFoders();\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(Dialog, {\n      open: true,\n      maxWidth: \"md\",\n      \"aria-labelledby\": \"max-width-dialog-title\",\n      \"aria-describedby\": \"max-width-dialog-description\",\n      fullWidth: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(DialogTitle, {\n      id: \"max-width-dialog-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 13\n      }\n    }, \"Add a path folder\"), /*#__PURE__*/React.createElement(Grid, {\n      container: true,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }\n    }, /*#__PURE__*/React.createElement(Grid, {\n      style: {\n        marginTop: 10 + \"px\",\n        marginLeft: 20 + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 19\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        height: 30 + \"px\"\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 19\n      }\n    }, \"Please insert the desired path for this registry book\"), /*#__PURE__*/React.createElement(TextField, {\n      style: {\n        marginTop: 30 + \"px\"\n      },\n      autoFocus: true,\n      margin: \"dense\",\n      id: \"pathFolder\",\n      label: \"Folder Path\",\n      variant: \"outlined\",\n      type: \"text\",\n      fullWidth: true,\n      onChange: this.handleFormInput('pathFolder'),\n      value: this.state.data.pathFolder || '',\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 19\n      }\n    }), /*#__PURE__*/React.createElement(Select, {\n      fullWidth: true,\n      value: this.state.pathFolder,\n      onChange: this.handleFormInput('pathFolder') //  input={<Input name=\"pathFolder\" id=\"pathFolderId\" />}\n      ,\n      displayEmpty: true,\n      style: {\n        marginTop: \"10px\"\n      },\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 23\n      }\n    }, this.state.folders && this.state.folders && this.state.folders && this.state.folders.map(e => /*#__PURE__*/React.createElement(MenuItem, {\n      key: e,\n      value: e,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 48\n      }\n    }, e))))), /*#__PURE__*/React.createElement(DialogActions, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 175,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: \"/app/folders\",\n      style: {\n        textDecoration: 'none',\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 176,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: () => this.handleUpdate(),\n      color: \"secondary\",\n      variant: \"contained\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177,\n        columnNumber: 17\n      }\n    }, \"Save\")), /*#__PURE__*/React.createElement(Link, {\n      to: \"/app/folders\",\n      style: {\n        textDecoration: 'none',\n        color: 'white'\n      },\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      onClick: \"\",\n      color: \"secondary\",\n      variant: \"outlined\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 17\n      }\n    }, \"Cancel\"))));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/src/app/module/Folders/addPathfolder.container.js"],"names":["React","Dialog","DialogTitle","Grid","TextField","DialogActions","Button","Select","Input","MenuItem","Link","updateRegisterBook","getBooksAndRecords","getRegisterBookById","listAllFolders","CheckboxTree","TreeItem","TreeView","makeStyles","ExpandMoreIcon","ChevronRightIcon","getBooksAndFolders","dispatchAction","AddPathFolderContainer","Component","constructor","props","handleFormInput","name","event","formdata","state","data","target","value","setState","getAllFoders","then","response","folders","console","log","catch","error","loadRegisterBook","id","linearProgressShown","handleUpdate","type","payload","snackbarMessage","snackbarType","setRedirect","listBooksAndFolders","year","page","size","registerType","String","registerName","registerYear","componentDidMount","match","params","temp","location","search","array","split","i","length","individual","render","marginTop","marginLeft","height","pathFolder","map","e","textDecoration","color"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Dialog,DialogTitle,Grid,TextField,DialogActions,Button, Select, Input, MenuItem} from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\nimport { updateRegisterBook, getBooksAndRecords } from './folder.repo';\r\nimport {getRegisterBookById,listAllFolders} from './folder.repo';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport {TreeItem,TreeView} from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport {getBooksAndFolders} from './folder.repo';\r\nimport { dispatchAction } from '../../..';\r\n\r\nexport default class AddPathFolderContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state ={\r\n          formdata: {},\r\n          data: {},\r\n          folders: [],\r\n          registerType: String,\r\n          registerName: String,\r\n          registerYear: String\r\n        }\r\n      }\r\n\r\n      componentDidMount(){\r\n        if(this.props.match.params.id){\r\n            this.loadRegisterBook(this.props.match.params.id);\r\n        }\r\n        var temp=this.props.location.search;\r\n        var array=temp.split(\"&\");\r\n        var registerName;\r\n        var registerType;\r\n        var registerYear;\r\n        var i;\r\n        for(i=0 ;i<array.length;i++){\r\n          var individual=array[i].split(\"=\")\r\n          if(i==0)\r\n          registerName=individual[1];\r\n         if(i==1)\r\n         registerType=individual[1];\r\n         if(i==2)\r\n         registerYear=individual[1];\r\n        }\r\n        this.setState({\r\n          registerName: this.registerName,\r\n          registerYear: this.registerYear,\r\n          registerType: this.registerYear\r\n        });\r\n        this.getAllFoders();\r\n      }\r\n      handleFormInput = name => event => {\r\n        var formdata = this.state.data;\r\n        formdata[name] = event.target.value;\r\n          this.setState({\r\n            data: formdata\r\n          });\r\n      }\r\n\r\n      getAllFoders = () => {\r\n        listAllFolders().then(response => {\r\n          this.setState({\r\n            folders: response.data,\r\n          });\r\n          console.log(response);\r\n        }).catch(error =>{\r\n          console.log(error);\r\n        });\r\n      }\r\n      loadRegisterBook = (id) => {\r\n        \r\n        getRegisterBookById(id).then(response => {\r\n            this.setState({\r\n                data: response.data,\r\n                linearProgressShown: false,\r\n            });\r\n            console.log(response);\r\n        }).catch(error =>{\r\n            console.log(error);\r\n            this.setState({\r\n                linearProgressShown: false\r\n            });\r\n        });\r\n      }\r\n    handleUpdate = () => {\r\n        this.setState({\r\n            linearProgressShown: true\r\n        });\r\n        updateRegisterBook(this.state.data).then(response => {\r\n            dispatchAction({\r\n                type: \"MAIN_LINEAR_PROGRESS_SHOW\",\r\n                payload: {\r\n                    snackbarMessage: 'Successfuly updated register book ' + response.data.name,\r\n                    snackbarType: 'success'\r\n                }\r\n            });\r\n            dispatchAction({\r\n              type: \"RELOAD ALL REGISTER BOOKS\",\r\n              payload: {}\r\n            });\r\n            this.setRedirect();\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n      }\r\n      listBooksAndFolders = (type,year,name,page, size) => {\r\n        // console.log(this.state.formdata.registerName);\r\n        // console.log(this.state.formdata.registerType);\r\n        // console.log(this.state.formdata.registerYear);\r\n        dispatchAction({\r\n          type: \"MAIN_LINEAR_PROGRESS_SHOW\"\r\n        });\r\n        getBooksAndFolders(type,year,name,page,size).then(response => {\r\n          this.setState({\r\n            data: response\r\n          },\r\n          dispatchAction({\r\n            type: \"MAIN_LINEAR_PROGRESS_HIDE\"\r\n          })\r\n          );\r\n          console.log(response);\r\n        }).catch(error => {\r\n          dispatchAction({\r\n            type: \"MAIN_LINEAR_PROGRESS_HIDE\"\r\n          });\r\n          console.log(error);\r\n        });\r\n      }\r\n    render(){\r\n        return(\r\n            <Dialog\r\n            open={true}\r\n            maxWidth=\"md\"\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            aria-describedby=\"max-width-dialog-description\"\r\n            fullWidth={true}\r\n            >\r\n            <DialogTitle id=\"max-width-dialog-title\">{\"Add a path folder\"}</DialogTitle>\r\n              <Grid container>\r\n                  <Grid  style={{marginTop:10+\"px\", marginLeft:20+\"px\"}}>\r\n                  <span style={{height:30+\"px\"}}>Please insert the desired path for this registry book</span>\r\n                  <TextField\r\n                      style={{marginTop:30+\"px\"}}\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"pathFolder\"\r\n                      label=\"Folder Path\"\r\n                      variant=\"outlined\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      onChange={this.handleFormInput('pathFolder')}\r\n                      value={this.state.data.pathFolder || ''}\r\n                  />\r\n                      <Select\r\n                                      fullWidth={true}\r\n                                       value={this.state.pathFolder}\r\n                                       onChange={this.handleFormInput('pathFolder')}\r\n                                      //  input={<Input name=\"pathFolder\" id=\"pathFolderId\" />}\r\n                                       displayEmpty\r\n                                       style={{marginTop:\"10px\"}}\r\n                                       variant=\"outlined\"\r\n                                   >\r\n                                      \r\n                                       {\r\n                                            this.state.folders && this.state.folders && this.state.folders &&\r\n                                            this.state.folders.map(e => (\r\n                                               <MenuItem key={e} value={e}>{e}</MenuItem>\r\n                                           ))\r\n                                       }\r\n                                   </Select>\r\n                      </Grid>\r\n                  \r\n              </Grid>\r\n            <DialogActions>\r\n            <Link to=\"/app/folders\" style={{textDecoration: 'none', color: 'white'}}>\r\n                <Button onClick={() => this.handleUpdate()} color=\"secondary\" variant=\"contained\">\r\n                    Save\r\n                </Button>\r\n            </Link>  \r\n            <Link to=\"/app/folders\" style={{textDecoration: 'none', color: 'white'}}>\r\n                <Button onClick=\"\" color=\"secondary\" variant=\"outlined\">\r\n                    Cancel\r\n                </Button>\r\n            </Link>       \r\n            </DialogActions>\r\n          </Dialog>\r\n        )\r\n    }\r\n   \r\n}"]},"metadata":{},"sourceType":"module"}