{"ast":null,"code":"import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport useEventCallback from '../utils/useEventCallback';\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\n\nfunction mapEventPropToEvent(eventProp) {\n  return eventProp.substring(2).toLowerCase();\n}\n\nfunction clickedRootScrollbar(event) {\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\n}\n/**\r\n * Listen for click events that occur somewhere in the document, outside of the element itself.\r\n * For instance, if you need to hide a menu when people click anywhere else on your page.\r\n */\n\n\nfunction ClickAwayListener(props) {\n  var children = props.children,\n      _props$disableReactTr = props.disableReactTree,\n      disableReactTree = _props$disableReactTr === void 0 ? false : _props$disableReactTr,\n      _props$mouseEvent = props.mouseEvent,\n      mouseEvent = _props$mouseEvent === void 0 ? 'onClick' : _props$mouseEvent,\n      onClickAway = props.onClickAway,\n      _props$touchEvent = props.touchEvent,\n      touchEvent = _props$touchEvent === void 0 ? 'onTouchEnd' : _props$touchEvent;\n  var movedRef = React.useRef(false);\n  var nodeRef = React.useRef(null);\n  var mountedRef = React.useRef(false);\n  var syntheticEventRef = React.useRef(false);\n  React.useEffect(() => {\n    mountedRef.current = true;\n    return () => {\n      mountedRef.current = false;\n    };\n  }, []); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    nodeRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\n  //\n  // event.preventDefault() is meant to stop default behaviours like\n  // clicking a checkbox to check it, hitting a button to submit a form,\n  // and hitting left arrow to move the cursor in a text input etc.\n  // Only special HTML elements have these default behaviors.\n\n  var handleClickAway = useEventCallback(event => {\n    // Given developers can stop the propagation of the synthetic event,\n    // we can only be confident with a positive value.\n    var insideReactTree = syntheticEventRef.current;\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\n    // 2. The child might render null.\n    // 3. Behave like a blur listener.\n\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\n      return;\n    } // Do not act if user performed touchmove\n\n\n    if (movedRef.current) {\n      movedRef.current = false;\n      return;\n    }\n\n    var insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\n\n    if (event.composedPath) {\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\n    } else {\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\n      var doc = ownerDocument(nodeRef.current);\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\n    }\n\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\n      onClickAway(event);\n    }\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\n\n  var createHandleSynthetic = handlerName => event => {\n    syntheticEventRef.current = true;\n    var childrenPropsHandler = children.props[handlerName];\n\n    if (childrenPropsHandler) {\n      childrenPropsHandler(event);\n    }\n  };\n\n  var childrenProps = {\n    ref: handleRef\n  };\n\n  if (touchEvent !== false) {\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\n  }\n\n  React.useEffect(() => {\n    if (touchEvent !== false) {\n      var mappedTouchEvent = mapEventPropToEvent(touchEvent);\n      var doc = ownerDocument(nodeRef.current);\n\n      var handleTouchMove = () => {\n        movedRef.current = true;\n      };\n\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\n      doc.addEventListener('touchmove', handleTouchMove);\n      return () => {\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\n        doc.removeEventListener('touchmove', handleTouchMove);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, touchEvent]);\n\n  if (mouseEvent !== false) {\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\n  }\n\n  React.useEffect(() => {\n    if (mouseEvent !== false) {\n      var mappedMouseEvent = mapEventPropToEvent(mouseEvent);\n      var doc = ownerDocument(nodeRef.current);\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\n      return () => {\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\n      };\n    }\n\n    return undefined;\n  }, [handleClickAway, mouseEvent]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The wrapped element.\r\n   */\n  children: elementAcceptingRef.isRequired,\n\n  /**\r\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\r\n   * This prop changes how portaled elements are handled.\r\n   */\n  disableReactTree: PropTypes.bool,\n\n  /**\r\n   * The mouse event to listen to. You can disable the listener by providing `false`.\r\n   */\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\n\n  /**\r\n   * Callback fired when a \"click away\" event is detected.\r\n   */\n  onClickAway: PropTypes.func.isRequired,\n\n  /**\r\n   * The touch event to listen to. You can disable the listener by providing `false`.\r\n   */\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\n}\n\nexport default ClickAwayListener;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/ClickAwayListener/ClickAwayListener.js"],"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","useEventCallback","elementAcceptingRef","exactProp","mapEventPropToEvent","eventProp","substring","toLowerCase","clickedRootScrollbar","event","document","documentElement","clientWidth","clientX","clientHeight","clientY","ClickAwayListener","props","children","disableReactTree","mouseEvent","onClickAway","touchEvent","movedRef","useRef","nodeRef","mountedRef","syntheticEventRef","useEffect","current","handleOwnRef","useCallback","instance","findDOMNode","handleRef","ref","handleClickAway","insideReactTree","insideDOM","composedPath","indexOf","doc","contains","target","createHandleSynthetic","handlerName","childrenPropsHandler","childrenProps","mappedTouchEvent","handleTouchMove","addEventListener","removeEventListener","undefined","mappedMouseEvent","createElement","Fragment","cloneElement","process","env","NODE_ENV","propTypes","isRequired","bool","oneOf","func"],"mappings":"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","sourcesContent":["import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport ownerDocument from '../utils/ownerDocument';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport useEventCallback from '../utils/useEventCallback';\r\nimport { elementAcceptingRef, exactProp } from '@material-ui/utils';\r\n\r\nfunction mapEventPropToEvent(eventProp) {\r\n  return eventProp.substring(2).toLowerCase();\r\n}\r\n\r\nfunction clickedRootScrollbar(event) {\r\n  return document.documentElement.clientWidth < event.clientX || document.documentElement.clientHeight < event.clientY;\r\n}\r\n/**\r\n * Listen for click events that occur somewhere in the document, outside of the element itself.\r\n * For instance, if you need to hide a menu when people click anywhere else on your page.\r\n */\r\n\r\n\r\nfunction ClickAwayListener(props) {\r\n  const {\r\n    children,\r\n    disableReactTree = false,\r\n    mouseEvent = 'onClick',\r\n    onClickAway,\r\n    touchEvent = 'onTouchEnd'\r\n  } = props;\r\n  const movedRef = React.useRef(false);\r\n  const nodeRef = React.useRef(null);\r\n  const mountedRef = React.useRef(false);\r\n  const syntheticEventRef = React.useRef(false);\r\n  React.useEffect(() => {\r\n    mountedRef.current = true;\r\n    return () => {\r\n      mountedRef.current = false;\r\n    };\r\n  }, []); // can be removed once we drop support for non ref forwarding class components\r\n\r\n  const handleOwnRef = React.useCallback(instance => {\r\n    // #StrictMode ready\r\n    nodeRef.current = ReactDOM.findDOMNode(instance);\r\n  }, []);\r\n  const handleRef = useForkRef(children.ref, handleOwnRef); // The handler doesn't take event.defaultPrevented into account:\r\n  //\r\n  // event.preventDefault() is meant to stop default behaviours like\r\n  // clicking a checkbox to check it, hitting a button to submit a form,\r\n  // and hitting left arrow to move the cursor in a text input etc.\r\n  // Only special HTML elements have these default behaviors.\r\n\r\n  const handleClickAway = useEventCallback(event => {\r\n    // Given developers can stop the propagation of the synthetic event,\r\n    // we can only be confident with a positive value.\r\n    const insideReactTree = syntheticEventRef.current;\r\n    syntheticEventRef.current = false; // 1. IE 11 support, which trigger the handleClickAway even after the unbind\r\n    // 2. The child might render null.\r\n    // 3. Behave like a blur listener.\r\n\r\n    if (!mountedRef.current || !nodeRef.current || clickedRootScrollbar(event)) {\r\n      return;\r\n    } // Do not act if user performed touchmove\r\n\r\n\r\n    if (movedRef.current) {\r\n      movedRef.current = false;\r\n      return;\r\n    }\r\n\r\n    let insideDOM; // If not enough, can use https://github.com/DieterHolvoet/event-propagation-path/blob/master/propagationPath.js\r\n\r\n    if (event.composedPath) {\r\n      insideDOM = event.composedPath().indexOf(nodeRef.current) > -1;\r\n    } else {\r\n      // TODO v6 remove dead logic https://caniuse.com/#search=composedPath.\r\n      const doc = ownerDocument(nodeRef.current);\r\n      insideDOM = !doc.documentElement.contains(event.target) || nodeRef.current.contains(event.target);\r\n    }\r\n\r\n    if (!insideDOM && (disableReactTree || !insideReactTree)) {\r\n      onClickAway(event);\r\n    }\r\n  }); // Keep track of mouse/touch events that bubbled up through the portal.\r\n\r\n  const createHandleSynthetic = handlerName => event => {\r\n    syntheticEventRef.current = true;\r\n    const childrenPropsHandler = children.props[handlerName];\r\n\r\n    if (childrenPropsHandler) {\r\n      childrenPropsHandler(event);\r\n    }\r\n  };\r\n\r\n  const childrenProps = {\r\n    ref: handleRef\r\n  };\r\n\r\n  if (touchEvent !== false) {\r\n    childrenProps[touchEvent] = createHandleSynthetic(touchEvent);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (touchEvent !== false) {\r\n      const mappedTouchEvent = mapEventPropToEvent(touchEvent);\r\n      const doc = ownerDocument(nodeRef.current);\r\n\r\n      const handleTouchMove = () => {\r\n        movedRef.current = true;\r\n      };\r\n\r\n      doc.addEventListener(mappedTouchEvent, handleClickAway);\r\n      doc.addEventListener('touchmove', handleTouchMove);\r\n      return () => {\r\n        doc.removeEventListener(mappedTouchEvent, handleClickAway);\r\n        doc.removeEventListener('touchmove', handleTouchMove);\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }, [handleClickAway, touchEvent]);\r\n\r\n  if (mouseEvent !== false) {\r\n    childrenProps[mouseEvent] = createHandleSynthetic(mouseEvent);\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (mouseEvent !== false) {\r\n      const mappedMouseEvent = mapEventPropToEvent(mouseEvent);\r\n      const doc = ownerDocument(nodeRef.current);\r\n      doc.addEventListener(mappedMouseEvent, handleClickAway);\r\n      return () => {\r\n        doc.removeEventListener(mappedMouseEvent, handleClickAway);\r\n      };\r\n    }\r\n\r\n    return undefined;\r\n  }, [handleClickAway, mouseEvent]);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.cloneElement(children, childrenProps));\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? ClickAwayListener.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * The wrapped element.\r\n   */\r\n  children: elementAcceptingRef.isRequired,\r\n\r\n  /**\r\n   * If `true`, the React tree is ignored and only the DOM tree is considered.\r\n   * This prop changes how portaled elements are handled.\r\n   */\r\n  disableReactTree: PropTypes.bool,\r\n\r\n  /**\r\n   * The mouse event to listen to. You can disable the listener by providing `false`.\r\n   */\r\n  mouseEvent: PropTypes.oneOf(['onClick', 'onMouseDown', 'onMouseUp', false]),\r\n\r\n  /**\r\n   * Callback fired when a \"click away\" event is detected.\r\n   */\r\n  onClickAway: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * The touch event to listen to. You can disable the listener by providing `false`.\r\n   */\r\n  touchEvent: PropTypes.oneOf(['onTouchEnd', 'onTouchStart', false])\r\n} : void 0;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  ClickAwayListener['propTypes' + ''] = exactProp(ClickAwayListener.propTypes);\r\n}\r\n\r\nexport default ClickAwayListener;"]},"metadata":{},"sourceType":"module"}