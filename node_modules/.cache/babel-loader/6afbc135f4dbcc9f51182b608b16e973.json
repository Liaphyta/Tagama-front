{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Repositories/starter-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nvar useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nvar Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  var children = props.children,\n      container = props.container,\n      _props$disablePortal = props.disablePortal,\n      disablePortal = _props$disablePortal === void 0 ? false : _props$disablePortal,\n      onRendered = props.onRendered;\n\n  var _React$useState = React.useState(null),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mountNode = _React$useState2[0],\n      setMountNode = _React$useState2[1];\n\n  var handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/node_modules/@material-ui/core/es/Portal/Portal.js"],"names":["React","ReactDOM","PropTypes","exactProp","HTMLElementType","setRef","useForkRef","getContainer","container","findDOMNode","useEnhancedEffect","window","useLayoutEffect","useEffect","Portal","forwardRef","props","ref","children","disablePortal","onRendered","useState","mountNode","setMountNode","handleRef","isValidElement","document","body","undefined","cloneElement","createPortal","process","env","NODE_ENV","propTypes","node","oneOfType","instanceOf","Component","func","bool"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAO,KAAKC,QAAZ,MAA0B,WAA1B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,EAAoBC,eAApB,QAA2C,oBAA3C;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,UAAP,MAAuB,qBAAvB;;AAEA,SAASC,YAAT,CAAsBC,SAAtB,EAAiC;AAC/BA,EAAAA,SAAS,GAAG,OAAOA,SAAP,KAAqB,UAArB,GAAkCA,SAAS,EAA3C,GAAgDA,SAA5D,CAD+B,CACwC;;AAEvE,SAAOP,QAAQ,CAACQ,WAAT,CAAqBD,SAArB,CAAP;AACD;;AAED,IAAME,iBAAiB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,GAAgCX,KAAK,CAACY,eAAtC,GAAwDZ,KAAK,CAACa,SAAxF;AACA;AACA;AACA;AACA;;AAEA,IAAMC,MAAM,GAAG,aAAad,KAAK,CAACe,UAAN,CAAiB,SAASD,MAAT,CAAgBE,KAAhB,EAAuBC,GAAvB,EAA4B;AAAA,MAErEC,QAFqE,GAMnEF,KANmE,CAErEE,QAFqE;AAAA,MAGrEV,SAHqE,GAMnEQ,KANmE,CAGrER,SAHqE;AAAA,6BAMnEQ,KANmE,CAIrEG,aAJqE;AAAA,MAIrEA,aAJqE,qCAIrD,KAJqD;AAAA,MAKrEC,UALqE,GAMnEJ,KANmE,CAKrEI,UALqE;;AAAA,wBAOrCpB,KAAK,CAACqB,QAAN,CAAe,IAAf,CAPqC;AAAA;AAAA,MAOhEC,SAPgE;AAAA,MAOrDC,YAPqD;;AAQvE,MAAMC,SAAS,GAAGlB,UAAU,EAAE,aAAaN,KAAK,CAACyB,cAAN,CAAqBP,QAArB,IAAiCA,QAAQ,CAACD,GAA1C,GAAgD,IAA/D,EAAqEA,GAArE,CAA5B;AACAP,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAI,CAACS,aAAL,EAAoB;AAClBI,MAAAA,YAAY,CAAChB,YAAY,CAACC,SAAD,CAAZ,IAA2BkB,QAAQ,CAACC,IAArC,CAAZ;AACD;AACF,GAJgB,EAId,CAACnB,SAAD,EAAYW,aAAZ,CAJc,CAAjB;AAKAT,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAIY,SAAS,IAAI,CAACH,aAAlB,EAAiC;AAC/Bd,MAAAA,MAAM,CAACY,GAAD,EAAMK,SAAN,CAAN;AACA,aAAO,MAAM;AACXjB,QAAAA,MAAM,CAACY,GAAD,EAAM,IAAN,CAAN;AACD,OAFD;AAGD;;AAED,WAAOW,SAAP;AACD,GATgB,EASd,CAACX,GAAD,EAAMK,SAAN,EAAiBH,aAAjB,CATc,CAAjB;AAUAT,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAIU,UAAU,KAAKE,SAAS,IAAIH,aAAlB,CAAd,EAAgD;AAC9CC,MAAAA,UAAU;AACX;AACF,GAJgB,EAId,CAACA,UAAD,EAAaE,SAAb,EAAwBH,aAAxB,CAJc,CAAjB;;AAMA,MAAIA,aAAJ,EAAmB;AACjB,SAAK,aAAanB,KAAK,CAACyB,cAAN,CAAqBP,QAArB,CAAlB,EAAkD;AAChD,aAAO,aAAalB,KAAK,CAAC6B,YAAN,CAAmBX,QAAnB,EAA6B;AAC/CD,QAAAA,GAAG,EAAEO;AAD0C,OAA7B,CAApB;AAGD;;AAED,WAAON,QAAP;AACD;;AAED,SAAOI,SAAS,GAAG,aAAarB,QAAQ,CAAC6B,YAAT,CAAsBZ,QAAtB,EAAgCI,SAAhC,CAAhB,GAA6DA,SAA7E;AACD,CAzC2B,CAA5B;AA0CAS,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCnB,MAAM,CAACoB,SAAP,GAAmB;AACzD;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEhB,EAAAA,QAAQ,EAAEhB,SAAS,CAACiC,IATqC;;AAWzD;AACF;AACA;AACA;AACA;AACA;AACA;AACE3B,EAAAA,SAAS,EAAEN;AACX;AADoB,GAEnBkC,SAFU,CAEA,CAAChC,eAAD,EAAkBF,SAAS,CAACmC,UAAV,CAAqBrC,KAAK,CAACsC,SAA3B,CAAlB,EAAyDpC,SAAS,CAACqC,IAAnE,CAFA,CAlB8C;;AAsBzD;AACF;AACA;AACA;AACEpB,EAAAA,aAAa,EAAEjB,SAAS,CAACsC,IA1BgC;;AA4BzD;AACF;AACA;AACA;AACA;AACEpB,EAAAA,UAAU,EAAElB,SAAS,CAACqC;AAjCmC,CAA3D,GAkCI,KAAK,CAlCT;;AAoCA,IAAIR,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAnB,EAAAA,MAAM,CAAC,cAAc,EAAf,CAAN,GAA2BX,SAAS,CAACW,MAAM,CAACoB,SAAR,CAApC;AACD;;AAED,eAAepB,MAAf","sourcesContent":["import * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport { exactProp, HTMLElementType } from '@material-ui/utils';\nimport setRef from '../utils/setRef';\nimport useForkRef from '../utils/useForkRef';\n\nfunction getContainer(container) {\n  container = typeof container === 'function' ? container() : container; // #StrictMode ready\n\n  return ReactDOM.findDOMNode(container);\n}\n\nconst useEnhancedEffect = typeof window !== 'undefined' ? React.useLayoutEffect : React.useEffect;\n/**\n * Portals provide a first-class way to render children into a DOM node\n * that exists outside the DOM hierarchy of the parent component.\n */\n\nconst Portal = /*#__PURE__*/React.forwardRef(function Portal(props, ref) {\n  const {\n    children,\n    container,\n    disablePortal = false,\n    onRendered\n  } = props;\n  const [mountNode, setMountNode] = React.useState(null);\n  const handleRef = useForkRef( /*#__PURE__*/React.isValidElement(children) ? children.ref : null, ref);\n  useEnhancedEffect(() => {\n    if (!disablePortal) {\n      setMountNode(getContainer(container) || document.body);\n    }\n  }, [container, disablePortal]);\n  useEnhancedEffect(() => {\n    if (mountNode && !disablePortal) {\n      setRef(ref, mountNode);\n      return () => {\n        setRef(ref, null);\n      };\n    }\n\n    return undefined;\n  }, [ref, mountNode, disablePortal]);\n  useEnhancedEffect(() => {\n    if (onRendered && (mountNode || disablePortal)) {\n      onRendered();\n    }\n  }, [onRendered, mountNode, disablePortal]);\n\n  if (disablePortal) {\n    if ( /*#__PURE__*/React.isValidElement(children)) {\n      return /*#__PURE__*/React.cloneElement(children, {\n        ref: handleRef\n      });\n    }\n\n    return children;\n  }\n\n  return mountNode ? /*#__PURE__*/ReactDOM.createPortal(children, mountNode) : mountNode;\n});\nprocess.env.NODE_ENV !== \"production\" ? Portal.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The children to render into the `container`.\n   */\n  children: PropTypes.node,\n\n  /**\n   * A HTML element, component instance, or function that returns either.\n   * The `container` will have the portal children appended to it.\n   *\n   * By default, it uses the body of the top-level document object,\n   * so it's simply `document.body` most of the time.\n   */\n  container: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .oneOfType([HTMLElementType, PropTypes.instanceOf(React.Component), PropTypes.func]),\n\n  /**\n   * Disable the portal behavior.\n   * The children stay within it's parent DOM hierarchy.\n   */\n  disablePortal: PropTypes.bool,\n\n  /**\n   * Callback fired once the children has been mounted into the `container`.\n   *\n   * This prop will be deprecated and removed in v5, the ref can be used instead.\n   */\n  onRendered: PropTypes.func\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Portal['propTypes' + ''] = exactProp(Portal.propTypes);\n}\n\nexport default Portal;"]},"metadata":{},"sourceType":"module"}