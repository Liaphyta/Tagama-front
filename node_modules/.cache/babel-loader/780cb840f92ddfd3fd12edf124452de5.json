{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = theme => ({\n  /* Styles applied to the root element. */\n  root: {\n    flex: '1 1 auto',\n    WebkitOverflowScrolling: 'touch',\n    // Add iOS momentum scrolling.\n    overflowY: 'auto',\n    padding: '8px 24px',\n    '&:first-child': {\n      // dialog without title\n      paddingTop: 20\n    }\n  },\n\n  /* Styles applied to the root element if `dividers={true}`. */\n  dividers: {\n    padding: '16px 24px',\n    borderTop: \"1px solid \".concat(theme.palette.divider),\n    borderBottom: \"1px solid \".concat(theme.palette.divider)\n  }\n});\nvar DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$dividers = props.dividers,\n      dividers = _props$dividers === void 0 ? false : _props$dividers,\n      other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"dividers\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dividers && classes.dividers),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * The content of the component.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\n  classes: PropTypes.object,\n\n  /**\r\n   * @ignore\r\n   */\n  className: PropTypes.string,\n\n  /**\r\n   * Display the top and bottom dividers.\r\n   */\n  dividers: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContent'\n})(DialogContent);","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/DialogContent/DialogContent.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","clsx","withStyles","styles","theme","root","flex","WebkitOverflowScrolling","overflowY","padding","paddingTop","dividers","borderTop","palette","divider","borderBottom","DialogContent","forwardRef","props","ref","classes","className","other","createElement","process","env","NODE_ENV","propTypes","children","node","object","string","bool","name"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,oCAArB;AACA,OAAOC,6BAAP,MAA0C,yDAA1C;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,MAAjB;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAO,IAAMC,MAAM,GAAGC,KAAK,KAAK;AAC9B;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAE,UADF;AAEJC,IAAAA,uBAAuB,EAAE,OAFrB;AAGJ;AACAC,IAAAA,SAAS,EAAE,MAJP;AAKJC,IAAAA,OAAO,EAAE,UALL;AAMJ,qBAAiB;AACf;AACAC,MAAAA,UAAU,EAAE;AAFG;AANb,GAFwB;;AAc9B;AACAC,EAAAA,QAAQ,EAAE;AACRF,IAAAA,OAAO,EAAE,WADD;AAERG,IAAAA,SAAS,sBAAeR,KAAK,CAACS,OAAN,CAAcC,OAA7B,CAFD;AAGRC,IAAAA,YAAY,sBAAeX,KAAK,CAACS,OAAN,CAAcC,OAA7B;AAHJ;AAfoB,CAAL,CAApB;AAqBP,IAAME,aAAa,GAAG,aAAajB,KAAK,CAACkB,UAAN,CAAiB,SAASD,aAAT,CAAuBE,KAAvB,EAA8BC,GAA9B,EAAmC;AAAA,MAEnFC,OAFmF,GAKjFF,KALiF,CAEnFE,OAFmF;AAAA,MAGnFC,SAHmF,GAKjFH,KALiF,CAGnFG,SAHmF;AAAA,wBAKjFH,KALiF,CAInFP,QAJmF;AAAA,MAInFA,QAJmF,gCAIxE,KAJwE;AAAA,MAM/EW,KAN+E,GAMvExB,6BAA6B,CAACoB,KAAD,EAAQ,CAAC,SAAD,EAAY,WAAZ,EAAyB,UAAzB,CAAR,CAN0C;;AAQrF,SAAO,aAAanB,KAAK,CAACwB,aAAN,CAAoB,KAApB,EAA2B1B,QAAQ,CAAC;AACtDwB,IAAAA,SAAS,EAAEpB,IAAI,CAACmB,OAAO,CAACf,IAAT,EAAegB,SAAf,EAA0BV,QAAQ,IAAIS,OAAO,CAACT,QAA9C,CADuC;AAEtDQ,IAAAA,GAAG,EAAEA;AAFiD,GAAD,EAGpDG,KAHoD,CAAnC,CAApB;AAID,CAZkC,CAAnC;AAaAE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCV,aAAa,CAACW,SAAd,GAA0B;AAChE;AACA;AACA;AACA;;AAEA;AACF;AACA;AACEC,EAAAA,QAAQ,EAAE5B,SAAS,CAAC6B,IAT4C;;AAWhE;AACF;AACA;AACA;AACET,EAAAA,OAAO,EAAEpB,SAAS,CAAC8B,MAf6C;;AAiBhE;AACF;AACA;AACET,EAAAA,SAAS,EAAErB,SAAS,CAAC+B,MApB2C;;AAsBhE;AACF;AACA;AACEpB,EAAAA,QAAQ,EAAEX,SAAS,CAACgC;AAzB4C,CAAlE,GA0BI,KAAK,CA1BT;AA2BA,eAAe9B,UAAU,CAACC,MAAD,EAAS;AAChC8B,EAAAA,IAAI,EAAE;AAD0B,CAAT,CAAV,CAEZjB,aAFY,CAAf","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\r\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\r\nimport * as React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport clsx from 'clsx';\r\nimport withStyles from '../styles/withStyles';\r\nexport const styles = theme => ({\r\n  /* Styles applied to the root element. */\r\n  root: {\r\n    flex: '1 1 auto',\r\n    WebkitOverflowScrolling: 'touch',\r\n    // Add iOS momentum scrolling.\r\n    overflowY: 'auto',\r\n    padding: '8px 24px',\r\n    '&:first-child': {\r\n      // dialog without title\r\n      paddingTop: 20\r\n    }\r\n  },\r\n\r\n  /* Styles applied to the root element if `dividers={true}`. */\r\n  dividers: {\r\n    padding: '16px 24px',\r\n    borderTop: `1px solid ${theme.palette.divider}`,\r\n    borderBottom: `1px solid ${theme.palette.divider}`\r\n  }\r\n});\r\nconst DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\r\n  const {\r\n    classes,\r\n    className,\r\n    dividers = false\r\n  } = props,\r\n        other = _objectWithoutPropertiesLoose(props, [\"classes\", \"className\", \"dividers\"]);\r\n\r\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\r\n    className: clsx(classes.root, className, dividers && classes.dividers),\r\n    ref: ref\r\n  }, other));\r\n});\r\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * The content of the component.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * Override or extend the styles applied to the component.\r\n   * See [CSS API](#css) below for more details.\r\n   */\r\n  classes: PropTypes.object,\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  className: PropTypes.string,\r\n\r\n  /**\r\n   * Display the top and bottom dividers.\r\n   */\r\n  dividers: PropTypes.bool\r\n} : void 0;\r\nexport default withStyles(styles, {\r\n  name: 'MuiDialogContent'\r\n})(DialogContent);"]},"metadata":{},"sourceType":"module"}