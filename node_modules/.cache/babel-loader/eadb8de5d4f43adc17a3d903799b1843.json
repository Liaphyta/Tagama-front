{"ast":null,"code":"import _defineProperty from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/objectWithoutPropertiesLoose\"; // @inheritedComponent ButtonBase\n\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport classNames from 'classnames';\nimport withStyles from '../styles/withStyles';\nimport ButtonBase from '../ButtonBase';\nimport unsupportedProp from '../utils/unsupportedProp';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      transition: theme.transitions.create(['color', 'padding-top'], {\n        duration: theme.transitions.duration.short\n      }),\n      padding: '6px 12px 8px',\n      minWidth: 80,\n      maxWidth: 168,\n      color: theme.palette.text.secondary,\n      flex: '1',\n      '&$iconOnly': {\n        paddingTop: 16\n      },\n      '&$selected': {\n        paddingTop: 6,\n        color: theme.palette.primary.main\n      }\n    },\n\n    /* Styles applied to the root element if selected. */\n    selected: {},\n\n    /* Styles applied to the root element if `showLabel={false}` and not selected. */\n    iconOnly: {},\n\n    /* Styles applied to the span element that wraps the icon and label. */\n    wrapper: {\n      display: 'inline-flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      width: '100%',\n      flexDirection: 'column'\n    },\n\n    /* Styles applied to the label's span element. */\n    label: {\n      fontFamily: theme.typography.fontFamily,\n      fontSize: theme.typography.pxToRem(12),\n      opacity: 1,\n      transition: 'font-size 0.2s, opacity 0.2s',\n      transitionDelay: '0.1s',\n      '&$iconOnly': {\n        opacity: 0,\n        transitionDelay: '0s'\n      },\n      '&$selected': {\n        fontSize: theme.typography.pxToRem(14)\n      }\n    }\n  };\n};\n\nvar BottomNavigationAction =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(BottomNavigationAction, _React$Component);\n\n  function BottomNavigationAction() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, BottomNavigationAction);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BottomNavigationAction)).call.apply(_getPrototypeOf2, [this].concat(args)));\n\n    _this.handleChange = function (event) {\n      var _this$props2 = _this.props,\n          onChange = _this$props2.onChange,\n          value = _this$props2.value,\n          onClick = _this$props2.onClick;\n\n      if (onChange) {\n        onChange(event, value);\n      }\n\n      if (onClick) {\n        onClick(event);\n      }\n    };\n\n    return _this;\n  }\n\n  _createClass(BottomNavigationAction, [{\n    key: \"render\",\n    value: function render() {\n      var _classNames, _classNames2;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          classNameProp = _this$props.className,\n          icon = _this$props.icon,\n          label = _this$props.label,\n          selected = _this$props.selected,\n          showLabelProp = _this$props.showLabel,\n          other = _objectWithoutPropertiesLoose(_this$props, [\"classes\", \"className\", \"icon\", \"label\", \"onChange\", \"onClick\", \"selected\", \"showLabel\", \"value\"]);\n\n      var className = classNames(classes.root, (_classNames = {}, _defineProperty(_classNames, classes.selected, selected), _defineProperty(_classNames, classes.iconOnly, !showLabelProp && !selected), _classNames), classNameProp);\n      var labelClassName = classNames(classes.label, (_classNames2 = {}, _defineProperty(_classNames2, classes.selected, selected), _defineProperty(_classNames2, classes.iconOnly, !showLabelProp && !selected), _classNames2));\n      return React.createElement(ButtonBase, _extends({\n        className: className,\n        focusRipple: true,\n        onClick: this.handleChange\n      }, other), React.createElement(\"span\", {\n        className: classes.wrapper\n      }, icon, React.createElement(\"span\", {\n        className: labelClassName\n      }, label)));\n    }\n  }]);\n\n  return BottomNavigationAction;\n}(React.Component);\n\nprocess.env.NODE_ENV !== \"production\" ? BottomNavigationAction.propTypes = {\n  /**\n   * This property isn't supported.\n   * Use the `component` property if you need to change the children structure.\n   */\n  children: unsupportedProp,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css-api) below for more details.\n   */\n  classes: PropTypes.object.isRequired,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The icon element.\n   */\n  icon: PropTypes.node,\n\n  /**\n   * The label element.\n   */\n  label: PropTypes.node,\n\n  /**\n   * @ignore\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  onClick: PropTypes.func,\n\n  /**\n   * @ignore\n   */\n  selected: PropTypes.bool,\n\n  /**\n   * If `true`, the `BottomNavigationAction` will show its label.\n   * By default, only the selected `BottomNavigationAction`\n   * inside `BottomNavigation` will show its label.\n   */\n  showLabel: PropTypes.bool,\n\n  /**\n   * You can provide your own value. Otherwise, we fallback to the child position index.\n   */\n  value: PropTypes.any\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiBottomNavigationAction'\n})(BottomNavigationAction);","map":null,"metadata":{},"sourceType":"module"}