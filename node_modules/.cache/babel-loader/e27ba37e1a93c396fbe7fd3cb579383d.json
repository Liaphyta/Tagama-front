{"ast":null,"code":"import _curry2 from './internal/_curry2.js';\nimport _assertPromise from './internal/_assertPromise.js';\n/**\r\n * Returns the result of applying the onFailure function to the value inside\r\n * a failed promise. This is useful for handling rejected promises\r\n * inside function compositions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\r\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\r\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\r\n * @param {Promise} p\r\n * @return {Promise} The result of calling `p.then(null, onFailure)`\r\n * @see R.then\r\n * @example\r\n *\r\n *      var failedFetch = (id) => Promise.reject('bad ID');\r\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\r\n *\r\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\r\n *      var recoverFromFailure = R.pipe(\r\n *        failedFetch,\r\n *        R.otherwise(useDefault),\r\n *        R.then(R.pick(['firstName', 'lastName'])),\r\n *      );\r\n *      recoverFromFailure(12345).then(console.log)\r\n */\n\nvar otherwise = /*#__PURE__*/_curry2(function otherwise(f, p) {\n  _assertPromise('otherwise', p);\n\n  return p.then(null, f);\n});\n\nexport default otherwise;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/ramda/es/otherwise.js"],"names":["_curry2","_assertPromise","otherwise","f","p","then"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,cAAP,MAA2B,8BAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,aAAaF,OAAO,CAAC,SAASE,SAAT,CAAmBC,CAAnB,EAAsBC,CAAtB,EAAyB;AAC5DH,EAAAA,cAAc,CAAC,WAAD,EAAcG,CAAd,CAAd;;AAEA,SAAOA,CAAC,CAACC,IAAF,CAAO,IAAP,EAAaF,CAAb,CAAP;AACD,CAJmC,CAApC;;AAKA,eAAeD,SAAf","sourcesContent":["import _curry2 from './internal/_curry2.js';\r\nimport _assertPromise from './internal/_assertPromise.js';\r\n\r\n/**\r\n * Returns the result of applying the onFailure function to the value inside\r\n * a failed promise. This is useful for handling rejected promises\r\n * inside function compositions.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig (e -> b) -> (Promise e a) -> (Promise e b)\r\n * @sig (e -> (Promise f b)) -> (Promise e a) -> (Promise f b)\r\n * @param {Function} onFailure The function to apply. Can return a value or a promise of a value.\r\n * @param {Promise} p\r\n * @return {Promise} The result of calling `p.then(null, onFailure)`\r\n * @see R.then\r\n * @example\r\n *\r\n *      var failedFetch = (id) => Promise.reject('bad ID');\r\n *      var useDefault = () => ({ firstName: 'Bob', lastName: 'Loblaw' })\r\n *\r\n *      //recoverFromFailure :: String -> Promise ({firstName, lastName})\r\n *      var recoverFromFailure = R.pipe(\r\n *        failedFetch,\r\n *        R.otherwise(useDefault),\r\n *        R.then(R.pick(['firstName', 'lastName'])),\r\n *      );\r\n *      recoverFromFailure(12345).then(console.log)\r\n */\r\nvar otherwise = /*#__PURE__*/_curry2(function otherwise(f, p) {\r\n  _assertPromise('otherwise', p);\r\n\r\n  return p.then(null, f);\r\n});\r\nexport default otherwise;"]},"metadata":{},"sourceType":"module"}