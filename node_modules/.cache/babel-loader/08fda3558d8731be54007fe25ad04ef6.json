{"ast":null,"code":"import _arity from './internal/_arity.js';\nimport _curry2 from './internal/_curry2.js';\nimport head from './head.js';\nimport _reduce from './internal/_reduce.js';\nimport tail from './tail.js';\nimport identity from './identity.js';\n/**\r\n * Performs left-to-right function composition using transforming function. The leftmost function may have\r\n * any arity; the remaining functions must be unary.\r\n *\r\n * **Note:** The result of pipeWith is not automatically curried.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} functions\r\n * @return {Function}\r\n * @see R.composeWith, R.pipe\r\n * @example\r\n *\r\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\r\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\r\n *\r\n *      f(3, 4); // -(3^4) + 1\r\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, f(g, ...args)))\r\n */\n\nvar pipeWith = /*#__PURE__*/_curry2(function pipeWith(xf, list) {\n  if (list.length <= 0) {\n    return identity;\n  }\n\n  var headList = head(list);\n  var tailList = tail(list);\n  return _arity(headList.length, function () {\n    return _reduce(function (result, f) {\n      return xf.call(this, f, result);\n    }, headList.apply(this, arguments), tailList);\n  });\n});\n\nexport default pipeWith;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/ramda/es/pipeWith.js"],"names":["_arity","_curry2","head","_reduce","tail","identity","pipeWith","xf","list","length","headList","tailList","result","f","call","apply","arguments"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,sBAAnB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,IAAP,MAAiB,WAAjB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,QAAQ,GAAG,aAAaL,OAAO,CAAC,SAASK,QAAT,CAAkBC,EAAlB,EAAsBC,IAAtB,EAA4B;AAC9D,MAAIA,IAAI,CAACC,MAAL,IAAe,CAAnB,EAAsB;AACpB,WAAOJ,QAAP;AACD;;AAED,MAAIK,QAAQ,GAAGR,IAAI,CAACM,IAAD,CAAnB;AACA,MAAIG,QAAQ,GAAGP,IAAI,CAACI,IAAD,CAAnB;AAEA,SAAOR,MAAM,CAACU,QAAQ,CAACD,MAAV,EAAkB,YAAY;AACzC,WAAON,OAAO,CAAC,UAAUS,MAAV,EAAkBC,CAAlB,EAAqB;AAClC,aAAON,EAAE,CAACO,IAAH,CAAQ,IAAR,EAAcD,CAAd,EAAiBD,MAAjB,CAAP;AACD,KAFa,EAEXF,QAAQ,CAACK,KAAT,CAAe,IAAf,EAAqBC,SAArB,CAFW,EAEsBL,QAFtB,CAAd;AAGD,GAJY,CAAb;AAKD,CAbkC,CAAnC;;AAcA,eAAeL,QAAf","sourcesContent":["import _arity from './internal/_arity.js';\r\nimport _curry2 from './internal/_curry2.js';\r\nimport head from './head.js';\r\nimport _reduce from './internal/_reduce.js';\r\nimport tail from './tail.js';\r\nimport identity from './identity.js';\r\n\r\n/**\r\n * Performs left-to-right function composition using transforming function. The leftmost function may have\r\n * any arity; the remaining functions must be unary.\r\n *\r\n * **Note:** The result of pipeWith is not automatically curried.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @category Function\r\n * @sig ((* -> *), [((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)]) -> ((a, b, ..., n) -> z)\r\n * @param {...Function} functions\r\n * @return {Function}\r\n * @see R.composeWith, R.pipe\r\n * @example\r\n *\r\n *      const pipeWhileNotNil = R.pipeWith((f, res) => R.isNil(res) ? res : f(res));\r\n *      const f = pipeWhileNotNil([Math.pow, R.negate, R.inc])\r\n *\r\n *      f(3, 4); // -(3^4) + 1\r\n * @symb R.pipeWith(f)([g, h, i])(...args) = f(i, f(h, f(g, ...args)))\r\n */\r\nvar pipeWith = /*#__PURE__*/_curry2(function pipeWith(xf, list) {\r\n  if (list.length <= 0) {\r\n    return identity;\r\n  }\r\n\r\n  var headList = head(list);\r\n  var tailList = tail(list);\r\n\r\n  return _arity(headList.length, function () {\r\n    return _reduce(function (result, f) {\r\n      return xf.call(this, f, result);\r\n    }, headList.apply(this, arguments), tailList);\r\n  });\r\n});\r\nexport default pipeWith;"]},"metadata":{},"sourceType":"module"}