{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _omit = _interopRequireDefault(require(\"../run/omit\"));\n\nvar _flatten = _interopRequireDefault(require(\"../run/flatten\"));\n\nvar _empty = _interopRequireDefault(require(\"../attributedString/empty\"));\n\nvar omitFont = R.evolve({\n  runs: R.map((0, _omit[\"default\"])('font'))\n});\n/**\r\n * Performs font substitution and script itemization on attributed string\r\n *\r\n * @param  {Object}  engines\r\n * @param  {Object}  layout options\r\n * @param  {Object}  attributed string\r\n * @return {Object} processed attributed string\r\n */\n\nvar preprocessRuns = function preprocessRuns(engines, options) {\n  return R.ifElse(R.isNil, _empty[\"default\"], R.applySpec({\n    string: R.prop('string'),\n    runs: R.compose(_flatten[\"default\"], R.flatten, R.pluck('runs'), R.juxt([engines.fontSubstitution(options), // font substitution\n    engines.scriptItemizer(options), // script itemization\n    omitFont]))\n  }));\n};\n\nvar _default = preprocessRuns;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@react-pdf/textkit/layout/preprocessRuns.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_omit","_flatten","_empty","omitFont","evolve","runs","map","preprocessRuns","engines","options","ifElse","isNil","applySpec","string","prop","compose","flatten","pluck","juxt","fontSubstitution","scriptItemizer","_default"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGH,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,aAAD,CAAR,CAAlC;;AAEA,IAAIM,QAAQ,GAAGP,sBAAsB,CAACC,OAAO,CAAC,gBAAD,CAAR,CAArC;;AAEA,IAAIO,MAAM,GAAGR,sBAAsB,CAACC,OAAO,CAAC,2BAAD,CAAR,CAAnC;;AAEA,IAAIQ,QAAQ,GAAGJ,CAAC,CAACK,MAAF,CAAS;AACtBC,EAAAA,IAAI,EAAEN,CAAC,CAACO,GAAF,CAAM,CAAC,GAAGN,KAAK,CAAC,SAAD,CAAT,EAAsB,MAAtB,CAAN;AADgB,CAAT,CAAf;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIO,cAAc,GAAG,SAASA,cAAT,CAAwBC,OAAxB,EAAiCC,OAAjC,EAA0C;AAC7D,SAAOV,CAAC,CAACW,MAAF,CAASX,CAAC,CAACY,KAAX,EAAkBT,MAAM,CAAC,SAAD,CAAxB,EAAqCH,CAAC,CAACa,SAAF,CAAY;AACtDC,IAAAA,MAAM,EAAEd,CAAC,CAACe,IAAF,CAAO,QAAP,CAD8C;AAEtDT,IAAAA,IAAI,EAAEN,CAAC,CAACgB,OAAF,CAAUd,QAAQ,CAAC,SAAD,CAAlB,EAA+BF,CAAC,CAACiB,OAAjC,EAA0CjB,CAAC,CAACkB,KAAF,CAAQ,MAAR,CAA1C,EAA2DlB,CAAC,CAACmB,IAAF,CAAO,CAACV,OAAO,CAACW,gBAAR,CAAyBV,OAAzB,CAAD,EAAoC;AAC5GD,IAAAA,OAAO,CAACY,cAAR,CAAuBX,OAAvB,CADwE,EACvC;AACjCN,IAAAA,QAFwE,CAAP,CAA3D;AAFgD,GAAZ,CAArC,CAAP;AAMD,CAPD;;AASA,IAAIkB,QAAQ,GAAGd,cAAf;AACAV,OAAO,CAAC,SAAD,CAAP,GAAqBwB,QAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nexports.__esModule = true;\r\nexports[\"default\"] = void 0;\r\n\r\nvar R = _interopRequireWildcard(require(\"ramda\"));\r\n\r\nvar _omit = _interopRequireDefault(require(\"../run/omit\"));\r\n\r\nvar _flatten = _interopRequireDefault(require(\"../run/flatten\"));\r\n\r\nvar _empty = _interopRequireDefault(require(\"../attributedString/empty\"));\r\n\r\nvar omitFont = R.evolve({\r\n  runs: R.map((0, _omit[\"default\"])('font'))\r\n});\r\n/**\r\n * Performs font substitution and script itemization on attributed string\r\n *\r\n * @param  {Object}  engines\r\n * @param  {Object}  layout options\r\n * @param  {Object}  attributed string\r\n * @return {Object} processed attributed string\r\n */\r\n\r\nvar preprocessRuns = function preprocessRuns(engines, options) {\r\n  return R.ifElse(R.isNil, _empty[\"default\"], R.applySpec({\r\n    string: R.prop('string'),\r\n    runs: R.compose(_flatten[\"default\"], R.flatten, R.pluck('runs'), R.juxt([engines.fontSubstitution(options), // font substitution\r\n    engines.scriptItemizer(options), // script itemization\r\n    omitFont]))\r\n  }));\r\n};\r\n\r\nvar _default = preprocessRuns;\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}