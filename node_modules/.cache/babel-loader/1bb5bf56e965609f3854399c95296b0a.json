{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n/**\r\n * Sum run function results\r\n *\r\n * @param {function} accum fn\r\n * @param {function} function run (run) -> Number\r\n * @param {number} initial value\r\n * @return {number} sum\r\n */\n\n\nvar sumRuns = function sumRuns(accum, fn, init) {\n  if (init === void 0) {\n    init = 0;\n  }\n\n  return R.compose(R.reduce(R.useWith(accum, [R.identity, fn]), init), R.prop('runs'));\n};\n\nvar _default = sumRuns;\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@react-pdf/textkit/attributedString/reduce.js"],"names":["_interopRequireWildcard","require","exports","__esModule","R","sumRuns","accum","fn","init","compose","reduce","useWith","identity","prop","_default"],"mappings":"AAAA;;AAEA,IAAIA,uBAAuB,GAAGC,OAAO,CAAC,+CAAD,CAArC;;AAEAC,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGJ,uBAAuB,CAACC,OAAO,CAAC,OAAD,CAAR,CAA/B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAII,OAAO,GAAG,SAASA,OAAT,CAAiBC,KAAjB,EAAwBC,EAAxB,EAA4BC,IAA5B,EAAkC;AAC9C,MAAIA,IAAI,KAAK,KAAK,CAAlB,EAAqB;AACnBA,IAAAA,IAAI,GAAG,CAAP;AACD;;AAED,SAAOJ,CAAC,CAACK,OAAF,CAAUL,CAAC,CAACM,MAAF,CAASN,CAAC,CAACO,OAAF,CAAUL,KAAV,EAAiB,CAACF,CAAC,CAACQ,QAAH,EAAaL,EAAb,CAAjB,CAAT,EAA6CC,IAA7C,CAAV,EAA8DJ,CAAC,CAACS,IAAF,CAAO,MAAP,CAA9D,CAAP;AACD,CAND;;AAQA,IAAIC,QAAQ,GAAGT,OAAf;AACAH,OAAO,CAAC,SAAD,CAAP,GAAqBY,QAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nexports.__esModule = true;\r\nexports[\"default\"] = void 0;\r\n\r\nvar R = _interopRequireWildcard(require(\"ramda\"));\r\n\r\n/**\r\n * Sum run function results\r\n *\r\n * @param {function} accum fn\r\n * @param {function} function run (run) -> Number\r\n * @param {number} initial value\r\n * @return {number} sum\r\n */\r\nvar sumRuns = function sumRuns(accum, fn, init) {\r\n  if (init === void 0) {\r\n    init = 0;\r\n  }\r\n\r\n  return R.compose(R.reduce(R.useWith(accum, [R.identity, fn]), init), R.prop('runs'));\r\n};\r\n\r\nvar _default = sumRuns;\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}