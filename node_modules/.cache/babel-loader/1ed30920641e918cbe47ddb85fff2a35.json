{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nexports.__esModule = true;\nexports[\"default\"] = void 0;\n\nvar R = _interopRequireWildcard(require(\"ramda\"));\n\nvar _copy = _interopRequireDefault(require(\"./copy\"));\n\nvar _slice = _interopRequireDefault(require(\"./slice\"));\n\nvar _concat = _interopRequireDefault(require(\"./concat\"));\n\nvar _append = _interopRequireDefault(require(\"./append\"));\n\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\n\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\n\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\n/**\r\n * Insert glyph to run in the given index\r\n *\r\n * @param  {number}  string index\r\n * @param  {Object}  glyph\r\n * @param  {Object}  run\r\n * @return {Object}  run with glyph\r\n */\n\n\nvar insertGlyph = function insertGlyph(index, glyph, run) {\n  if (!glyph) return (0, _copy[\"default\"])(run); // Split resolves ligature splitting in case new glyph breaks some\n\n  var leadingRun = (0, _slice[\"default\"])(0, index, run);\n  var trailingRun = (0, _slice[\"default\"])(index, Infinity, run);\n  return (0, _concat[\"default\"])((0, _append[\"default\"])(glyph, leadingRun), trailingRun);\n};\n/**\r\n * Insert either glyph or code point to run in the given index\r\n *\r\n * @param  {number}  string index\r\n * @param  {Object | number}  glyph | codePoint\r\n * @param  {Object}  run\r\n * @return {Object}  run with glyph\r\n */\n\n\nvar insert = function insert(index, value, run) {\n  var font = (0, _getFont[\"default\"])(run);\n  var glyph = (0, _isNumber[\"default\"])(value) ? (0, _fromCodePoint[\"default\"])(value, font) : value;\n  return insertGlyph(index, glyph, run);\n};\n\nvar _default = R.curryN(3, insert);\n\nexports[\"default\"] = _default;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@react-pdf/textkit/run/insert.js"],"names":["_interopRequireDefault","require","_interopRequireWildcard","exports","__esModule","R","_copy","_slice","_concat","_append","_getFont","_isNumber","_fromCodePoint","insertGlyph","index","glyph","run","leadingRun","trailingRun","Infinity","insert","value","font","_default","curryN"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEA,IAAIC,uBAAuB,GAAGD,OAAO,CAAC,+CAAD,CAArC;;AAEAE,OAAO,CAACC,UAAR,GAAqB,IAArB;AACAD,OAAO,CAAC,SAAD,CAAP,GAAqB,KAAK,CAA1B;;AAEA,IAAIE,CAAC,GAAGH,uBAAuB,CAACD,OAAO,CAAC,OAAD,CAAR,CAA/B;;AAEA,IAAIK,KAAK,GAAGN,sBAAsB,CAACC,OAAO,CAAC,QAAD,CAAR,CAAlC;;AAEA,IAAIM,MAAM,GAAGP,sBAAsB,CAACC,OAAO,CAAC,SAAD,CAAR,CAAnC;;AAEA,IAAIO,OAAO,GAAGR,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIQ,OAAO,GAAGT,sBAAsB,CAACC,OAAO,CAAC,UAAD,CAAR,CAApC;;AAEA,IAAIS,QAAQ,GAAGV,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAArC;;AAEA,IAAIU,SAAS,GAAGX,sBAAsB,CAACC,OAAO,CAAC,mBAAD,CAAR,CAAtC;;AAEA,IAAIW,cAAc,GAAGZ,sBAAsB,CAACC,OAAO,CAAC,wBAAD,CAAR,CAA3C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,IAAIY,WAAW,GAAG,SAASA,WAAT,CAAqBC,KAArB,EAA4BC,KAA5B,EAAmCC,GAAnC,EAAwC;AACxD,MAAI,CAACD,KAAL,EAAY,OAAO,CAAC,GAAGT,KAAK,CAAC,SAAD,CAAT,EAAsBU,GAAtB,CAAP,CAD4C,CACT;;AAE/C,MAAIC,UAAU,GAAG,CAAC,GAAGV,MAAM,CAAC,SAAD,CAAV,EAAuB,CAAvB,EAA0BO,KAA1B,EAAiCE,GAAjC,CAAjB;AACA,MAAIE,WAAW,GAAG,CAAC,GAAGX,MAAM,CAAC,SAAD,CAAV,EAAuBO,KAAvB,EAA8BK,QAA9B,EAAwCH,GAAxC,CAAlB;AACA,SAAO,CAAC,GAAGR,OAAO,CAAC,SAAD,CAAX,EAAwB,CAAC,GAAGC,OAAO,CAAC,SAAD,CAAX,EAAwBM,KAAxB,EAA+BE,UAA/B,CAAxB,EAAoEC,WAApE,CAAP;AACD,CAND;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,IAAIE,MAAM,GAAG,SAASA,MAAT,CAAgBN,KAAhB,EAAuBO,KAAvB,EAA8BL,GAA9B,EAAmC;AAC9C,MAAIM,IAAI,GAAG,CAAC,GAAGZ,QAAQ,CAAC,SAAD,CAAZ,EAAyBM,GAAzB,CAAX;AACA,MAAID,KAAK,GAAG,CAAC,GAAGJ,SAAS,CAAC,SAAD,CAAb,EAA0BU,KAA1B,IAAmC,CAAC,GAAGT,cAAc,CAAC,SAAD,CAAlB,EAA+BS,KAA/B,EAAsCC,IAAtC,CAAnC,GAAiFD,KAA7F;AACA,SAAOR,WAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,CAAlB;AACD,CAJD;;AAMA,IAAIO,QAAQ,GAAGlB,CAAC,CAACmB,MAAF,CAAS,CAAT,EAAYJ,MAAZ,CAAf;;AAEAjB,OAAO,CAAC,SAAD,CAAP,GAAqBoB,QAArB","sourcesContent":["\"use strict\";\r\n\r\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\r\n\r\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\r\n\r\nexports.__esModule = true;\r\nexports[\"default\"] = void 0;\r\n\r\nvar R = _interopRequireWildcard(require(\"ramda\"));\r\n\r\nvar _copy = _interopRequireDefault(require(\"./copy\"));\r\n\r\nvar _slice = _interopRequireDefault(require(\"./slice\"));\r\n\r\nvar _concat = _interopRequireDefault(require(\"./concat\"));\r\n\r\nvar _append = _interopRequireDefault(require(\"./append\"));\r\n\r\nvar _getFont = _interopRequireDefault(require(\"./getFont\"));\r\n\r\nvar _isNumber = _interopRequireDefault(require(\"../utils/isNumber\"));\r\n\r\nvar _fromCodePoint = _interopRequireDefault(require(\"../glyph/fromCodePoint\"));\r\n\r\n/**\r\n * Insert glyph to run in the given index\r\n *\r\n * @param  {number}  string index\r\n * @param  {Object}  glyph\r\n * @param  {Object}  run\r\n * @return {Object}  run with glyph\r\n */\r\nvar insertGlyph = function insertGlyph(index, glyph, run) {\r\n  if (!glyph) return (0, _copy[\"default\"])(run); // Split resolves ligature splitting in case new glyph breaks some\r\n\r\n  var leadingRun = (0, _slice[\"default\"])(0, index, run);\r\n  var trailingRun = (0, _slice[\"default\"])(index, Infinity, run);\r\n  return (0, _concat[\"default\"])((0, _append[\"default\"])(glyph, leadingRun), trailingRun);\r\n};\r\n/**\r\n * Insert either glyph or code point to run in the given index\r\n *\r\n * @param  {number}  string index\r\n * @param  {Object | number}  glyph | codePoint\r\n * @param  {Object}  run\r\n * @return {Object}  run with glyph\r\n */\r\n\r\n\r\nvar insert = function insert(index, value, run) {\r\n  var font = (0, _getFont[\"default\"])(run);\r\n  var glyph = (0, _isNumber[\"default\"])(value) ? (0, _fromCodePoint[\"default\"])(value, font) : value;\r\n  return insertGlyph(index, glyph, run);\r\n};\r\n\r\nvar _default = R.curryN(3, insert);\r\n\r\nexports[\"default\"] = _default;"]},"metadata":{},"sourceType":"script"}