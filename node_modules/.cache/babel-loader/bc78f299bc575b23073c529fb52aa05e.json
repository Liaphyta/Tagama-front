{"ast":null,"code":"/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\nimport * as React from 'react';\nimport * as ReactDOM from 'react-dom';\nimport PropTypes from 'prop-types';\nimport ownerDocument from '../utils/ownerDocument';\nimport useForkRef from '../utils/useForkRef';\nimport { exactProp } from '@material-ui/utils';\n/**\r\n * Utility component that locks focus inside the component.\r\n */\n\nfunction Unstable_TrapFocus(props) {\n  var children = props.children,\n      _props$disableAutoFoc = props.disableAutoFocus,\n      disableAutoFocus = _props$disableAutoFoc === void 0 ? false : _props$disableAutoFoc,\n      _props$disableEnforce = props.disableEnforceFocus,\n      disableEnforceFocus = _props$disableEnforce === void 0 ? false : _props$disableEnforce,\n      _props$disableRestore = props.disableRestoreFocus,\n      disableRestoreFocus = _props$disableRestore === void 0 ? false : _props$disableRestore,\n      getDoc = props.getDoc,\n      isEnabled = props.isEnabled,\n      open = props.open;\n  var ignoreNextEnforceFocus = React.useRef();\n  var sentinelStart = React.useRef(null);\n  var sentinelEnd = React.useRef(null);\n  var nodeToRestore = React.useRef();\n  var rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\n\n  var handleOwnRef = React.useCallback(instance => {\n    // #StrictMode ready\n    rootRef.current = ReactDOM.findDOMNode(instance);\n  }, []);\n  var handleRef = useForkRef(children.ref, handleOwnRef);\n  var prevOpenRef = React.useRef();\n  React.useEffect(() => {\n    prevOpenRef.current = open;\n  }, [open]);\n\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\n    // WARNING: Potentially unsafe in concurrent mode.\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\n    // Say we render `open={false}` -> `open={true}` but never commit.\n    // We have now written a state that wasn't committed. But no committed effect\n    // will read this wrong value. We only read from `nodeToRestore` in effects\n    // that were committed on `open={true}`\n    // WARNING: Prevents the instance from being garbage collected. Should only\n    // hold a weak ref.\n    nodeToRestore.current = getDoc().activeElement;\n  }\n\n  React.useEffect(() => {\n    if (!open) {\n      return;\n    }\n\n    var doc = ownerDocument(rootRef.current); // We might render an empty child.\n\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n      if (!rootRef.current.hasAttribute('tabIndex')) {\n        if (process.env.NODE_ENV !== 'production') {\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\n        }\n\n        rootRef.current.setAttribute('tabIndex', -1);\n      }\n\n      rootRef.current.focus();\n    }\n\n    var contain = () => {\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\n        ignoreNextEnforceFocus.current = false;\n        return;\n      }\n\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\n        rootRef.current.focus();\n      }\n    };\n\n    var loopFocus = event => {\n      // 9 = Tab\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\n        return;\n      } // Make sure the next tab starts from the right place.\n\n\n      if (doc.activeElement === rootRef.current) {\n        // We need to ignore the next contain as\n        // it will try to move the focus back to the rootRef element.\n        ignoreNextEnforceFocus.current = true;\n\n        if (event.shiftKey) {\n          sentinelEnd.current.focus();\n        } else {\n          sentinelStart.current.focus();\n        }\n      }\n    };\n\n    doc.addEventListener('focus', contain, true);\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\n    //\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\n\n    var interval = setInterval(() => {\n      contain();\n    }, 50);\n    return () => {\n      clearInterval(interval);\n      doc.removeEventListener('focus', contain, true);\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\n\n      if (!disableRestoreFocus) {\n        // In IE 11 it is possible for document.activeElement to be null resulting\n        // in nodeToRestore.current being null.\n        // Not all elements in IE 11 have a focus method.\n        // Once IE 11 support is dropped the focus() call can be unconditional.\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\n          nodeToRestore.current.focus();\n        }\n\n        nodeToRestore.current = null;\n      }\n    };\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelStart,\n    \"data-test\": \"sentinelStart\"\n  }), /*#__PURE__*/React.cloneElement(children, {\n    ref: handleRef\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    tabIndex: 0,\n    ref: sentinelEnd,\n    \"data-test\": \"sentinelEnd\"\n  }));\n}\n\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\r\n   * A single child content element.\r\n   */\n  children: PropTypes.node,\n\n  /**\r\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\r\n   * replace it to the last focused element when it closes.\r\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\n  disableAutoFocus: PropTypes.bool,\n\n  /**\r\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\n  disableEnforceFocus: PropTypes.bool,\n\n  /**\r\n   * If `true`, the trap focus will not restore focus to previously focused element once\r\n   * trap focus is hidden.\r\n   */\n  disableRestoreFocus: PropTypes.bool,\n\n  /**\r\n   * Return the document to consider.\r\n   * We use it to implement the restore focus between different browser documents.\r\n   */\n  getDoc: PropTypes.func.isRequired,\n\n  /**\r\n   * Do we still want to enforce the focus?\r\n   * This prop helps nesting TrapFocus elements.\r\n   */\n  isEnabled: PropTypes.func.isRequired,\n\n  /**\r\n   * If `true`, focus will be locked.\r\n   */\n  open: PropTypes.bool.isRequired\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\n}\n\nexport default Unstable_TrapFocus;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/Unstable_TrapFocus/Unstable_TrapFocus.js"],"names":["React","ReactDOM","PropTypes","ownerDocument","useForkRef","exactProp","Unstable_TrapFocus","props","children","disableAutoFocus","disableEnforceFocus","disableRestoreFocus","getDoc","isEnabled","open","ignoreNextEnforceFocus","useRef","sentinelStart","sentinelEnd","nodeToRestore","rootRef","handleOwnRef","useCallback","instance","current","findDOMNode","handleRef","ref","prevOpenRef","useEffect","window","activeElement","doc","contains","hasAttribute","process","env","NODE_ENV","console","error","join","setAttribute","focus","contain","hasFocus","loopFocus","event","keyCode","shiftKey","addEventListener","interval","setInterval","clearInterval","removeEventListener","createElement","Fragment","tabIndex","cloneElement","propTypes","node","bool","func","isRequired"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return, jsx-a11y/no-noninteractive-tabindex, camelcase */\r\nimport * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport PropTypes from 'prop-types';\r\nimport ownerDocument from '../utils/ownerDocument';\r\nimport useForkRef from '../utils/useForkRef';\r\nimport { exactProp } from '@material-ui/utils';\r\n/**\r\n * Utility component that locks focus inside the component.\r\n */\r\n\r\nfunction Unstable_TrapFocus(props) {\r\n  const {\r\n    children,\r\n    disableAutoFocus = false,\r\n    disableEnforceFocus = false,\r\n    disableRestoreFocus = false,\r\n    getDoc,\r\n    isEnabled,\r\n    open\r\n  } = props;\r\n  const ignoreNextEnforceFocus = React.useRef();\r\n  const sentinelStart = React.useRef(null);\r\n  const sentinelEnd = React.useRef(null);\r\n  const nodeToRestore = React.useRef();\r\n  const rootRef = React.useRef(null); // can be removed once we drop support for non ref forwarding class components\r\n\r\n  const handleOwnRef = React.useCallback(instance => {\r\n    // #StrictMode ready\r\n    rootRef.current = ReactDOM.findDOMNode(instance);\r\n  }, []);\r\n  const handleRef = useForkRef(children.ref, handleOwnRef);\r\n  const prevOpenRef = React.useRef();\r\n  React.useEffect(() => {\r\n    prevOpenRef.current = open;\r\n  }, [open]);\r\n\r\n  if (!prevOpenRef.current && open && typeof window !== 'undefined') {\r\n    // WARNING: Potentially unsafe in concurrent mode.\r\n    // The way the read on `nodeToRestore` is setup could make this actually safe.\r\n    // Say we render `open={false}` -> `open={true}` but never commit.\r\n    // We have now written a state that wasn't committed. But no committed effect\r\n    // will read this wrong value. We only read from `nodeToRestore` in effects\r\n    // that were committed on `open={true}`\r\n    // WARNING: Prevents the instance from being garbage collected. Should only\r\n    // hold a weak ref.\r\n    nodeToRestore.current = getDoc().activeElement;\r\n  }\r\n\r\n  React.useEffect(() => {\r\n    if (!open) {\r\n      return;\r\n    }\r\n\r\n    const doc = ownerDocument(rootRef.current); // We might render an empty child.\r\n\r\n    if (!disableAutoFocus && rootRef.current && !rootRef.current.contains(doc.activeElement)) {\r\n      if (!rootRef.current.hasAttribute('tabIndex')) {\r\n        if (process.env.NODE_ENV !== 'production') {\r\n          console.error(['Material-UI: The modal content node does not accept focus.', 'For the benefit of assistive technologies, ' + 'the tabIndex of the node is being set to \"-1\".'].join('\\n'));\r\n        }\r\n\r\n        rootRef.current.setAttribute('tabIndex', -1);\r\n      }\r\n\r\n      rootRef.current.focus();\r\n    }\r\n\r\n    const contain = () => {\r\n      if (!doc.hasFocus() || disableEnforceFocus || !isEnabled() || ignoreNextEnforceFocus.current) {\r\n        ignoreNextEnforceFocus.current = false;\r\n        return;\r\n      }\r\n\r\n      if (rootRef.current && !rootRef.current.contains(doc.activeElement)) {\r\n        rootRef.current.focus();\r\n      }\r\n    };\r\n\r\n    const loopFocus = event => {\r\n      // 9 = Tab\r\n      if (disableEnforceFocus || !isEnabled() || event.keyCode !== 9) {\r\n        return;\r\n      } // Make sure the next tab starts from the right place.\r\n\r\n\r\n      if (doc.activeElement === rootRef.current) {\r\n        // We need to ignore the next contain as\r\n        // it will try to move the focus back to the rootRef element.\r\n        ignoreNextEnforceFocus.current = true;\r\n\r\n        if (event.shiftKey) {\r\n          sentinelEnd.current.focus();\r\n        } else {\r\n          sentinelStart.current.focus();\r\n        }\r\n      }\r\n    };\r\n\r\n    doc.addEventListener('focus', contain, true);\r\n    doc.addEventListener('keydown', loopFocus, true); // With Edge, Safari and Firefox, no focus related events are fired when the focused area stops being a focused area\r\n    // e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=559561.\r\n    //\r\n    // The whatwg spec defines how the browser should behave but does not explicitly mention any events:\r\n    // https://html.spec.whatwg.org/multipage/interaction.html#focus-fixup-rule.\r\n\r\n    const interval = setInterval(() => {\r\n      contain();\r\n    }, 50);\r\n    return () => {\r\n      clearInterval(interval);\r\n      doc.removeEventListener('focus', contain, true);\r\n      doc.removeEventListener('keydown', loopFocus, true); // restoreLastFocus()\r\n\r\n      if (!disableRestoreFocus) {\r\n        // In IE 11 it is possible for document.activeElement to be null resulting\r\n        // in nodeToRestore.current being null.\r\n        // Not all elements in IE 11 have a focus method.\r\n        // Once IE 11 support is dropped the focus() call can be unconditional.\r\n        if (nodeToRestore.current && nodeToRestore.current.focus) {\r\n          nodeToRestore.current.focus();\r\n        }\r\n\r\n        nodeToRestore.current = null;\r\n      }\r\n    };\r\n  }, [disableAutoFocus, disableEnforceFocus, disableRestoreFocus, isEnabled, open]);\r\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\r\n    tabIndex: 0,\r\n    ref: sentinelStart,\r\n    \"data-test\": \"sentinelStart\"\r\n  }), /*#__PURE__*/React.cloneElement(children, {\r\n    ref: handleRef\r\n  }), /*#__PURE__*/React.createElement(\"div\", {\r\n    tabIndex: 0,\r\n    ref: sentinelEnd,\r\n    \"data-test\": \"sentinelEnd\"\r\n  }));\r\n}\r\n\r\nprocess.env.NODE_ENV !== \"production\" ? Unstable_TrapFocus.propTypes = {\r\n  // ----------------------------- Warning --------------------------------\r\n  // | These PropTypes are generated from the TypeScript type definitions |\r\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\r\n  // ----------------------------------------------------------------------\r\n\r\n  /**\r\n   * A single child content element.\r\n   */\r\n  children: PropTypes.node,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not automatically shift focus to itself when it opens, and\r\n   * replace it to the last focused element when it closes.\r\n   * This also works correctly with any trap focus children that have the `disableAutoFocus` prop.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\r\n  disableAutoFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not prevent focus from leaving the trap focus while open.\r\n   *\r\n   * Generally this should never be set to `true` as it makes the trap focus less\r\n   * accessible to assistive technologies, like screen readers.\r\n   */\r\n  disableEnforceFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * If `true`, the trap focus will not restore focus to previously focused element once\r\n   * trap focus is hidden.\r\n   */\r\n  disableRestoreFocus: PropTypes.bool,\r\n\r\n  /**\r\n   * Return the document to consider.\r\n   * We use it to implement the restore focus between different browser documents.\r\n   */\r\n  getDoc: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * Do we still want to enforce the focus?\r\n   * This prop helps nesting TrapFocus elements.\r\n   */\r\n  isEnabled: PropTypes.func.isRequired,\r\n\r\n  /**\r\n   * If `true`, focus will be locked.\r\n   */\r\n  open: PropTypes.bool.isRequired\r\n} : void 0;\r\n\r\nif (process.env.NODE_ENV !== 'production') {\r\n  // eslint-disable-next-line\r\n  Unstable_TrapFocus['propTypes' + ''] = exactProp(Unstable_TrapFocus.propTypes);\r\n}\r\n\r\nexport default Unstable_TrapFocus;"]},"metadata":{},"sourceType":"module"}