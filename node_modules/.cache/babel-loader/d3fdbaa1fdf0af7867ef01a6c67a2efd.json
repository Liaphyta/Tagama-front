{"ast":null,"code":"import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\n/* eslint-disable no-use-before-define */\n\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\n\nfunction clamp(value, min = 0, max = 1) {\n  if (process.env.NODE_ENV !== 'production') {\n    if (value < min || value > max) {\n      console.error(\"Material-UI: The value provided \".concat(value, \" is out of range [\").concat(min, \", \").concat(max, \"].\"));\n    }\n  }\n\n  return Math.min(Math.max(min, value), max);\n}\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\n\n\nexport function hexToRgb(color) {\n  color = color.substr(1);\n  var re = new RegExp(\".{1,\".concat(color.length >= 6 ? 2 : 1, \"}\"), 'g');\n  var colors = color.match(re);\n\n  if (colors && colors[0].length === 1) {\n    colors = colors.map(n => n + n);\n  }\n\n  return colors ? \"rgb\".concat(colors.length === 4 ? 'a' : '', \"(\").concat(colors.map((n, index) => {\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\n  }).join(', '), \")\") : '';\n}\n\nfunction intToHex(int) {\n  var hex = int.toString(16);\n  return hex.length === 1 ? \"0\".concat(hex) : hex;\n}\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n *\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\n\n\nexport function rgbToHex(color) {\n  // Idempotent\n  if (color.indexOf('#') === 0) {\n    return color;\n  }\n\n  var _decomposeColor = decomposeColor(color),\n      values = _decomposeColor.values;\n\n  return \"#\".concat(values.map(n => intToHex(n)).join(''));\n}\n/**\r\n * Converts a color from hsl format to rgb format.\r\n *\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\n\nexport function hslToRgb(color) {\n  color = decomposeColor(color);\n  var _color = color,\n      values = _color.values;\n  var h = values[0];\n  var s = values[1] / 100;\n  var l = values[2] / 100;\n  var a = s * Math.min(l, 1 - l);\n\n  var f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n\n  var type = 'rgb';\n  var rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\n\n  if (color.type === 'hsla') {\n    type += 'a';\n    rgb.push(values[3]);\n  }\n\n  return recomposeColor({\n    type,\n    values: rgb\n  });\n}\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\n\nexport function decomposeColor(color) {\n  // Idempotent\n  if (color.type) {\n    return color;\n  }\n\n  if (color.charAt(0) === '#') {\n    return decomposeColor(hexToRgb(color));\n  }\n\n  var marker = color.indexOf('(');\n  var type = color.substring(0, marker);\n\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\n    throw new Error(process.env.NODE_ENV !== \"production\" ? \"Material-UI: Unsupported `\".concat(color, \"` color.\\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().\") : _formatMuiErrorMessage(3, color));\n  }\n\n  var values = color.substring(marker + 1, color.length - 1).split(',');\n  values = values.map(value => parseFloat(value));\n  return {\n    type,\n    values\n  };\n}\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\n\nexport function recomposeColor(color) {\n  var type = color.type;\n  var values = color.values;\n\n  if (type.indexOf('rgb') !== -1) {\n    // Only convert the first 3 values to int (i.e. not alpha)\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\n  } else if (type.indexOf('hsl') !== -1) {\n    values[1] = \"\".concat(values[1], \"%\");\n    values[2] = \"\".concat(values[2], \"%\");\n  }\n\n  return \"\".concat(type, \"(\").concat(values.join(', '), \")\");\n}\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\n\nexport function getContrastRatio(foreground, background) {\n  var lumA = getLuminance(foreground);\n  var lumB = getLuminance(background);\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\n}\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\n\nexport function getLuminance(color) {\n  color = decomposeColor(color);\n  var rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\n  rgb = rgb.map(val => {\n    val /= 255; // normalized\n\n    return val <= 0.03928 ? val / 12.92 : Math.pow((val + 0.055) / 1.055, 2.4);\n  }); // Truncate at 3 digits\n\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\n}\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function emphasize(color, coefficient = 0.15) {\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\n}\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function fade(color, value) {\n  color = decomposeColor(color);\n  value = clamp(value);\n\n  if (color.type === 'rgb' || color.type === 'hsl') {\n    color.type += 'a';\n  }\n\n  color.values[3] = value;\n  return recomposeColor(color);\n}\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function darken(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] *= 1 - coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] *= 1 - coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\n\nexport function lighten(color, coefficient) {\n  color = decomposeColor(color);\n  coefficient = clamp(coefficient);\n\n  if (color.type.indexOf('hsl') !== -1) {\n    color.values[2] += (100 - color.values[2]) * coefficient;\n  } else if (color.type.indexOf('rgb') !== -1) {\n    for (var i = 0; i < 3; i += 1) {\n      color.values[i] += (255 - color.values[i]) * coefficient;\n    }\n  }\n\n  return recomposeColor(color);\n}","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/@material-ui/core/es/styles/colorManipulator.js"],"names":["formatMuiErrorMessage","_formatMuiErrorMessage","clamp","value","min","max","process","env","NODE_ENV","console","error","Math","hexToRgb","color","substr","re","RegExp","length","colors","match","map","n","index","parseInt","round","join","intToHex","int","hex","toString","rgbToHex","indexOf","decomposeColor","values","hslToRgb","h","s","l","a","f","k","type","rgb","push","recomposeColor","charAt","marker","substring","Error","split","parseFloat","i","getContrastRatio","foreground","background","lumA","getLuminance","lumB","val","Number","toFixed","emphasize","coefficient","darken","lighten","fade"],"mappings":"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","sourcesContent":["import { formatMuiErrorMessage as _formatMuiErrorMessage } from \"@material-ui/utils\";\r\n\r\n/* eslint-disable no-use-before-define */\r\n\r\n/**\r\n * Returns a number whose value is limited to the given range.\r\n *\r\n * @param {number} value The value to be clamped\r\n * @param {number} min The lower boundary of the output range\r\n * @param {number} max The upper boundary of the output range\r\n * @returns {number} A number in the range [min, max]\r\n */\r\nfunction clamp(value, min = 0, max = 1) {\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (value < min || value > max) {\r\n      console.error(`Material-UI: The value provided ${value} is out of range [${min}, ${max}].`);\r\n    }\r\n  }\r\n\r\n  return Math.min(Math.max(min, value), max);\r\n}\r\n/**\r\n * Converts a color from CSS hex format to CSS rgb format.\r\n *\r\n * @param {string} color - Hex color, i.e. #nnn or #nnnnnn\r\n * @returns {string} A CSS rgb color string\r\n */\r\n\r\n\r\nexport function hexToRgb(color) {\r\n  color = color.substr(1);\r\n  const re = new RegExp(`.{1,${color.length >= 6 ? 2 : 1}}`, 'g');\r\n  let colors = color.match(re);\r\n\r\n  if (colors && colors[0].length === 1) {\r\n    colors = colors.map(n => n + n);\r\n  }\r\n\r\n  return colors ? `rgb${colors.length === 4 ? 'a' : ''}(${colors.map((n, index) => {\r\n    return index < 3 ? parseInt(n, 16) : Math.round(parseInt(n, 16) / 255 * 1000) / 1000;\r\n  }).join(', ')})` : '';\r\n}\r\n\r\nfunction intToHex(int) {\r\n  const hex = int.toString(16);\r\n  return hex.length === 1 ? `0${hex}` : hex;\r\n}\r\n/**\r\n * Converts a color from CSS rgb format to CSS hex format.\r\n *\r\n * @param {string} color - RGB color, i.e. rgb(n, n, n)\r\n * @returns {string} A CSS rgb color string, i.e. #nnnnnn\r\n */\r\n\r\n\r\nexport function rgbToHex(color) {\r\n  // Idempotent\r\n  if (color.indexOf('#') === 0) {\r\n    return color;\r\n  }\r\n\r\n  const {\r\n    values\r\n  } = decomposeColor(color);\r\n  return `#${values.map(n => intToHex(n)).join('')}`;\r\n}\r\n/**\r\n * Converts a color from hsl format to rgb format.\r\n *\r\n * @param {string} color - HSL color values\r\n * @returns {string} rgb color values\r\n */\r\n\r\nexport function hslToRgb(color) {\r\n  color = decomposeColor(color);\r\n  const {\r\n    values\r\n  } = color;\r\n  const h = values[0];\r\n  const s = values[1] / 100;\r\n  const l = values[2] / 100;\r\n  const a = s * Math.min(l, 1 - l);\r\n\r\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\r\n\r\n  let type = 'rgb';\r\n  const rgb = [Math.round(f(0) * 255), Math.round(f(8) * 255), Math.round(f(4) * 255)];\r\n\r\n  if (color.type === 'hsla') {\r\n    type += 'a';\r\n    rgb.push(values[3]);\r\n  }\r\n\r\n  return recomposeColor({\r\n    type,\r\n    values: rgb\r\n  });\r\n}\r\n/**\r\n * Returns an object with the type and values of a color.\r\n *\r\n * Note: Does not support rgb % values.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {object} - A MUI color object: {type: string, values: number[]}\r\n */\r\n\r\nexport function decomposeColor(color) {\r\n  // Idempotent\r\n  if (color.type) {\r\n    return color;\r\n  }\r\n\r\n  if (color.charAt(0) === '#') {\r\n    return decomposeColor(hexToRgb(color));\r\n  }\r\n\r\n  const marker = color.indexOf('(');\r\n  const type = color.substring(0, marker);\r\n\r\n  if (['rgb', 'rgba', 'hsl', 'hsla'].indexOf(type) === -1) {\r\n    throw new Error(process.env.NODE_ENV !== \"production\" ? `Material-UI: Unsupported \\`${color}\\` color.\r\nWe support the following formats: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla().` : _formatMuiErrorMessage(3, color));\r\n  }\r\n\r\n  let values = color.substring(marker + 1, color.length - 1).split(',');\r\n  values = values.map(value => parseFloat(value));\r\n  return {\r\n    type,\r\n    values\r\n  };\r\n}\r\n/**\r\n * Converts a color object with type and values to a string.\r\n *\r\n * @param {object} color - Decomposed color\r\n * @param {string} color.type - One of: 'rgb', 'rgba', 'hsl', 'hsla'\r\n * @param {array} color.values - [n,n,n] or [n,n,n,n]\r\n * @returns {string} A CSS color string\r\n */\r\n\r\nexport function recomposeColor(color) {\r\n  const {\r\n    type\r\n  } = color;\r\n  let {\r\n    values\r\n  } = color;\r\n\r\n  if (type.indexOf('rgb') !== -1) {\r\n    // Only convert the first 3 values to int (i.e. not alpha)\r\n    values = values.map((n, i) => i < 3 ? parseInt(n, 10) : n);\r\n  } else if (type.indexOf('hsl') !== -1) {\r\n    values[1] = `${values[1]}%`;\r\n    values[2] = `${values[2]}%`;\r\n  }\r\n\r\n  return `${type}(${values.join(', ')})`;\r\n}\r\n/**\r\n * Calculates the contrast ratio between two colors.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} foreground - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {string} background - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} A contrast ratio value in the range 0 - 21.\r\n */\r\n\r\nexport function getContrastRatio(foreground, background) {\r\n  const lumA = getLuminance(foreground);\r\n  const lumB = getLuminance(background);\r\n  return (Math.max(lumA, lumB) + 0.05) / (Math.min(lumA, lumB) + 0.05);\r\n}\r\n/**\r\n * The relative brightness of any point in a color space,\r\n * normalized to 0 for darkest black and 1 for lightest white.\r\n *\r\n * Formula: https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @returns {number} The relative brightness of the color in the range 0 - 1\r\n */\r\n\r\nexport function getLuminance(color) {\r\n  color = decomposeColor(color);\r\n  let rgb = color.type === 'hsl' ? decomposeColor(hslToRgb(color)).values : color.values;\r\n  rgb = rgb.map(val => {\r\n    val /= 255; // normalized\r\n\r\n    return val <= 0.03928 ? val / 12.92 : ((val + 0.055) / 1.055) ** 2.4;\r\n  }); // Truncate at 3 digits\r\n\r\n  return Number((0.2126 * rgb[0] + 0.7152 * rgb[1] + 0.0722 * rgb[2]).toFixed(3));\r\n}\r\n/**\r\n * Darken or lighten a color, depending on its luminance.\r\n * Light colors are darkened, dark colors are lightened.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient=0.15 - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function emphasize(color, coefficient = 0.15) {\r\n  return getLuminance(color) > 0.5 ? darken(color, coefficient) : lighten(color, coefficient);\r\n}\r\n/**\r\n * Set the absolute transparency of a color.\r\n * Any existing alpha values are overwritten.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} value - value to set the alpha channel to in the range 0 -1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function fade(color, value) {\r\n  color = decomposeColor(color);\r\n  value = clamp(value);\r\n\r\n  if (color.type === 'rgb' || color.type === 'hsl') {\r\n    color.type += 'a';\r\n  }\r\n\r\n  color.values[3] = value;\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Darkens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function darken(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] *= 1 - coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] *= 1 - coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}\r\n/**\r\n * Lightens a color.\r\n *\r\n * @param {string} color - CSS color, i.e. one of: #nnn, #nnnnnn, rgb(), rgba(), hsl(), hsla()\r\n * @param {number} coefficient - multiplier in the range 0 - 1\r\n * @returns {string} A CSS color string. Hex input values are returned as rgb\r\n */\r\n\r\nexport function lighten(color, coefficient) {\r\n  color = decomposeColor(color);\r\n  coefficient = clamp(coefficient);\r\n\r\n  if (color.type.indexOf('hsl') !== -1) {\r\n    color.values[2] += (100 - color.values[2]) * coefficient;\r\n  } else if (color.type.indexOf('rgb') !== -1) {\r\n    for (let i = 0; i < 3; i += 1) {\r\n      color.values[i] += (255 - color.values[i]) * coefficient;\r\n    }\r\n  }\r\n\r\n  return recomposeColor(color);\r\n}"]},"metadata":{},"sourceType":"module"}