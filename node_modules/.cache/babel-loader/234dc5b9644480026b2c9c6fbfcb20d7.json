{"ast":null,"code":"import _slicedToArray from \"C:/Users/user/Desktop/Repositories/starter-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nvar useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  var children = props.children,\n      _props$defer = props.defer,\n      defer = _props$defer === void 0 ? false : _props$defer,\n      _props$fallback = props.fallback,\n      fallback = _props$fallback === void 0 ? null : _props$fallback;\n\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      mountedState = _React$useState2[0],\n      setMountedState = _React$useState2[1];\n\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/node_modules/@material-ui/core/es/NoSsr/NoSsr.js"],"names":["React","PropTypes","exactProp","useEnhancedEffect","window","process","env","NODE_ENV","useLayoutEffect","useEffect","NoSsr","props","children","defer","fallback","useState","mountedState","setMountedState","createElement","Fragment","propTypes","node","bool"],"mappings":";AAAA,OAAO,KAAKA,KAAZ,MAAuB,OAAvB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,SAAT,QAA0B,oBAA1B;AACA,IAAMC,iBAAiB,GAAG,OAAOC,MAAP,KAAkB,WAAlB,IAAiCC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,MAA1D,GAAmEP,KAAK,CAACQ,eAAzE,GAA2FR,KAAK,CAACS,SAA3H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,SAASC,KAAT,CAAeC,KAAf,EAAsB;AAAA,MAElBC,QAFkB,GAKhBD,KALgB,CAElBC,QAFkB;AAAA,qBAKhBD,KALgB,CAGlBE,KAHkB;AAAA,MAGlBA,KAHkB,6BAGV,KAHU;AAAA,wBAKhBF,KALgB,CAIlBG,QAJkB;AAAA,MAIlBA,QAJkB,gCAIP,IAJO;;AAAA,wBAMoBd,KAAK,CAACe,QAAN,CAAe,KAAf,CANpB;AAAA;AAAA,MAMbC,YANa;AAAA,MAMCC,eAND;;AAOpBd,EAAAA,iBAAiB,CAAC,MAAM;AACtB,QAAI,CAACU,KAAL,EAAY;AACVI,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJgB,EAId,CAACJ,KAAD,CAJc,CAAjB;AAKAb,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACpB,QAAII,KAAJ,EAAW;AACTI,MAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,GAJD,EAIG,CAACJ,KAAD,CAJH,EAZoB,CAgBP;;AAEb,SAAO,aAAab,KAAK,CAACkB,aAAN,CAAoBlB,KAAK,CAACmB,QAA1B,EAAoC,IAApC,EAA0CH,YAAY,GAAGJ,QAAH,GAAcE,QAApE,CAApB;AACD;;AAEDT,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAAzB,GAAwCG,KAAK,CAACU,SAAN,GAAkB;AACxD;AACA;AACA;AACA;;AAEA;AACF;AACA;AACER,EAAAA,QAAQ,EAAEX,SAAS,CAACoB,IAToC;;AAWxD;AACF;AACA;AACA;AACER,EAAAA,KAAK,EAAEZ,SAAS,CAACqB,IAfuC;;AAiBxD;AACF;AACA;AACER,EAAAA,QAAQ,EAAEb,SAAS,CAACoB;AApBoC,CAA1D,GAqBI,KAAK,CArBT;;AAuBA,IAAIhB,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC;AACAG,EAAAA,KAAK,CAAC,cAAc,EAAf,CAAL,GAA0BR,SAAS,CAACQ,KAAK,CAACU,SAAP,CAAnC;AACD;;AAED,eAAeV,KAAf","sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { exactProp } from '@material-ui/utils';\nconst useEnhancedEffect = typeof window !== 'undefined' && process.env.NODE_ENV !== 'test' ? React.useLayoutEffect : React.useEffect;\n/**\n * NoSsr purposely removes components from the subject of Server Side Rendering (SSR).\n *\n * This component can be useful in a variety of situations:\n * - Escape hatch for broken dependencies not supporting SSR.\n * - Improve the time-to-first paint on the client by only rendering above the fold.\n * - Reduce the rendering time on the server.\n * - Under too heavy server load, you can turn on service degradation.\n */\n\nfunction NoSsr(props) {\n  const {\n    children,\n    defer = false,\n    fallback = null\n  } = props;\n  const [mountedState, setMountedState] = React.useState(false);\n  useEnhancedEffect(() => {\n    if (!defer) {\n      setMountedState(true);\n    }\n  }, [defer]);\n  React.useEffect(() => {\n    if (defer) {\n      setMountedState(true);\n    }\n  }, [defer]); // We need the Fragment here to force react-docgen to recognise NoSsr as a component.\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, mountedState ? children : fallback);\n}\n\nprocess.env.NODE_ENV !== \"production\" ? NoSsr.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * You can wrap a node.\n   */\n  children: PropTypes.node,\n\n  /**\n   * If `true`, the component will not only prevent server-side rendering.\n   * It will also defer the rendering of the children into a different screen frame.\n   */\n  defer: PropTypes.bool,\n\n  /**\n   * The fallback content to display.\n   */\n  fallback: PropTypes.node\n} : void 0;\n\nif (process.env.NODE_ENV !== 'production') {\n  // eslint-disable-next-line\n  NoSsr['propTypes' + ''] = exactProp(NoSsr.propTypes);\n}\n\nexport default NoSsr;"]},"metadata":{},"sourceType":"module"}