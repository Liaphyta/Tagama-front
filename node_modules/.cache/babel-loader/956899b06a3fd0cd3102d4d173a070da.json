{"ast":null,"code":"import _concat from './internal/_concat.js';\nimport _curry3 from './internal/_curry3.js';\nimport uniqWith from './uniqWith.js';\n/**\r\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\r\n * of each list. Duplication is determined according to the value returned by\r\n * applying the supplied predicate to two list elements.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The first and second lists concatenated, with\r\n *         duplicates removed.\r\n * @see R.union\r\n * @example\r\n *\r\n *      const l1 = [{a: 1}, {a: 2}];\r\n *      const l2 = [{a: 1}, {a: 4}];\r\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\r\n */\n\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\n  return uniqWith(pred, _concat(list1, list2));\n});\n\nexport default unionWith;","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/tagama/Tagama-front/Tagama-front/node_modules/ramda/es/unionWith.js"],"names":["_concat","_curry3","uniqWith","unionWith","pred","list1","list2"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,uBAApB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,eAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIC,SAAS,GAAG,aAAaF,OAAO,CAAC,SAASE,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgCC,KAAhC,EAAuC;AAC1E,SAAOJ,QAAQ,CAACE,IAAD,EAAOJ,OAAO,CAACK,KAAD,EAAQC,KAAR,CAAd,CAAf;AACD,CAFmC,CAApC;;AAGA,eAAeH,SAAf","sourcesContent":["import _concat from './internal/_concat.js';\r\nimport _curry3 from './internal/_curry3.js';\r\nimport uniqWith from './uniqWith.js';\r\n\r\n/**\r\n * Combines two lists into a set (i.e. no duplicates) composed of the elements\r\n * of each list. Duplication is determined according to the value returned by\r\n * applying the supplied predicate to two list elements.\r\n *\r\n * @func\r\n * @memberOf R\r\n * @since v0.1.0\r\n * @category Relation\r\n * @sig ((a, a) -> Boolean) -> [*] -> [*] -> [*]\r\n * @param {Function} pred A predicate used to test whether two items are equal.\r\n * @param {Array} list1 The first list.\r\n * @param {Array} list2 The second list.\r\n * @return {Array} The first and second lists concatenated, with\r\n *         duplicates removed.\r\n * @see R.union\r\n * @example\r\n *\r\n *      const l1 = [{a: 1}, {a: 2}];\r\n *      const l2 = [{a: 1}, {a: 4}];\r\n *      R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\r\n */\r\nvar unionWith = /*#__PURE__*/_curry3(function unionWith(pred, list1, list2) {\r\n  return uniqWith(pred, _concat(list1, list2));\r\n});\r\nexport default unionWith;"]},"metadata":{},"sourceType":"module"}