{"ast":null,"code":"import _classCallCheck from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Repositories\\\\starter-app\\\\src\\\\app\\\\module\\\\Folders\\\\addPathfolder.container.js\";\nimport React from 'react';\nimport { Dialog, DialogTitle, Grid, TextField, DialogActions, Button, Select, Input, MenuItem } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { updateRegisterBook, getBooksAndRecords } from './folder.repo';\nimport { getRegisterBookById, listAllFolders } from './folder.repo';\nimport CheckboxTree from 'react-checkbox-tree';\nimport { TreeItem, TreeView } from '@material-ui/lab';\nimport { makeStyles } from '@material-ui/core/styles';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\nimport { getBooksAndFolders } from './folder.repo';\nimport { dispatchAction } from '../../..';\n\nvar AddPathFolderContainer =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(AddPathFolderContainer, _React$Component);\n\n  function AddPathFolderContainer(props) {\n    var _this;\n\n    _classCallCheck(this, AddPathFolderContainer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AddPathFolderContainer).call(this, props));\n\n    _this.handleFormInput = function (name) {\n      return function (event) {\n        var formdata = _this.state.data;\n        formdata[name] = event.target.value;\n\n        _this.setState({\n          data: formdata\n        });\n      };\n    };\n\n    _this.getAllFoders = function () {\n      listAllFolders().then(function (response) {\n        _this.setState({\n          folders: response.data\n        });\n\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.loadRegisterBook = function (id) {\n      getRegisterBookById(id).then(function (response) {\n        _this.setState({\n          data: response.data,\n          linearProgressShown: false\n        });\n\n        console.log(response);\n      }).catch(function (error) {\n        console.log(error);\n\n        _this.setState({\n          linearProgressShown: false\n        });\n      });\n    };\n\n    _this.handleUpdate = function () {\n      _this.setState({\n        linearProgressShown: true\n      });\n\n      updateRegisterBook(_this.state.data).then(function (response) {\n        dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_SHOW\",\n          payload: {\n            snackbarMessage: 'Successfuly updated register book ' + response.data.name,\n            snackbarType: 'success'\n          }\n        });\n        dispatchAction({\n          type: \"RELOAD ALL REGISTER BOOKS\",\n          payload: {}\n        });\n\n        _this.setRedirect();\n      }).catch(function (error) {\n        console.log(error);\n      });\n    };\n\n    _this.listBooksAndFolders = function (type, year, name, page, size) {\n      // console.log(this.state.formdata.registerName);\n      // console.log(this.state.formdata.registerType);\n      // console.log(this.state.formdata.registerYear);\n      dispatchAction({\n        type: \"MAIN_LINEAR_PROGRESS_SHOW\"\n      });\n      getBooksAndFolders(type, year, name, page, size).then(function (response) {\n        _this.setState({\n          data: response\n        }, dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_HIDE\"\n        }));\n\n        console.log(response);\n      }).catch(function (error) {\n        dispatchAction({\n          type: \"MAIN_LINEAR_PROGRESS_HIDE\"\n        });\n        console.log(error);\n      });\n    };\n\n    _this.state = {\n      formdata: {},\n      data: {},\n      folders: [],\n      registerType: String,\n      registerName: String,\n      registerYear: String\n    };\n    return _this;\n  }\n\n  _createClass(AddPathFolderContainer, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      if (this.props.match.params.id) {\n        this.loadRegisterBook(this.props.match.params.id);\n      }\n\n      var temp = this.props.location.search;\n      var array = temp.split(\"&\");\n      var registerName;\n      var registerType;\n      var registerYear;\n      var i;\n\n      for (i = 0; i < array.length; i++) {\n        var individual = array[i].split(\"=\");\n        if (i == 0) registerName = individual[1];\n        if (i == 1) registerType = individual[1];\n        if (i == 2) registerYear = individual[1];\n      }\n\n      this.setState({\n        registerName: this.registerName,\n        registerYear: this.registerYear,\n        registerType: this.registerYear\n      });\n      this.getAllFoders();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Dialog, {\n        open: true,\n        maxWidth: \"md\",\n        \"aria-labelledby\": \"max-width-dialog-title\",\n        \"aria-describedby\": \"max-width-dialog-description\",\n        fullWidth: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132\n        },\n        __self: this\n      }, React.createElement(DialogTitle, {\n        id: \"max-width-dialog-title\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 139\n        },\n        __self: this\n      }, \"Add a path folder\"), React.createElement(Grid, {\n        container: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, React.createElement(Grid, {\n        style: {\n          marginTop: 10 + \"px\",\n          marginLeft: 20 + \"px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        style: {\n          height: 30 + \"px\"\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, \"Please insert the desired path for this registry book\"), React.createElement(TextField, {\n        style: {\n          marginTop: 30 + \"px\"\n        },\n        autoFocus: true,\n        margin: \"dense\",\n        id: \"pathFolder\",\n        label: \"Folder Path\",\n        variant: \"outlined\",\n        type: \"text\",\n        fullWidth: true,\n        onChange: this.handleFormInput('pathFolder'),\n        value: this.state.data.pathFolder || '',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }), React.createElement(Select, {\n        fullWidth: true,\n        value: this.state.pathFolder,\n        onChange: this.handleFormInput('pathFolder') //  input={<Input name=\"pathFolder\" id=\"pathFolderId\" />}\n        ,\n        displayEmpty: true,\n        style: {\n          marginTop: \"10px\"\n        },\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, this.state.folders && this.state.folders && this.state.folders && this.state.folders.map(function (e) {\n        return React.createElement(MenuItem, {\n          key: e,\n          value: e,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, e);\n      })))), React.createElement(DialogActions, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, React.createElement(Link, {\n        to: \"/app/folders\",\n        style: {\n          textDecoration: 'none',\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: function onClick() {\n          return _this2.handleUpdate();\n        },\n        color: \"secondary\",\n        variant: \"contained\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"Save\")), React.createElement(Link, {\n        to: \"/app/folders\",\n        style: {\n          textDecoration: 'none',\n          color: 'white'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 181\n        },\n        __self: this\n      }, React.createElement(Button, {\n        onClick: \"\",\n        color: \"secondary\",\n        variant: \"outlined\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, \"Cancel\"))));\n    }\n  }]);\n\n  return AddPathFolderContainer;\n}(React.Component);\n\nexport { AddPathFolderContainer as default };","map":{"version":3,"sources":["C:/Users/user/Desktop/Repositories/starter-app/src/app/module/Folders/addPathfolder.container.js"],"names":["React","Dialog","DialogTitle","Grid","TextField","DialogActions","Button","Select","Input","MenuItem","Link","updateRegisterBook","getBooksAndRecords","getRegisterBookById","listAllFolders","CheckboxTree","TreeItem","TreeView","makeStyles","ExpandMoreIcon","ChevronRightIcon","getBooksAndFolders","dispatchAction","AddPathFolderContainer","props","handleFormInput","name","event","formdata","state","data","target","value","setState","getAllFoders","then","response","folders","console","log","catch","error","loadRegisterBook","id","linearProgressShown","handleUpdate","type","payload","snackbarMessage","snackbarType","setRedirect","listBooksAndFolders","year","page","size","registerType","String","registerName","registerYear","match","params","temp","location","search","array","split","i","length","individual","marginTop","marginLeft","height","pathFolder","map","e","textDecoration","color","Component"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {Dialog,DialogTitle,Grid,TextField,DialogActions,Button, Select, Input, MenuItem} from '@material-ui/core'\r\nimport { Link } from 'react-router-dom';\r\nimport { updateRegisterBook, getBooksAndRecords } from './folder.repo';\r\nimport {getRegisterBookById,listAllFolders} from './folder.repo';\r\nimport CheckboxTree from 'react-checkbox-tree';\r\nimport {TreeItem,TreeView} from '@material-ui/lab';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight';\r\nimport {getBooksAndFolders} from './folder.repo';\r\nimport { dispatchAction } from '../../..';\r\n\r\nexport default class AddPathFolderContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state ={\r\n          formdata: {},\r\n          data: {},\r\n          folders: [],\r\n          registerType: String,\r\n          registerName: String,\r\n          registerYear: String\r\n        }\r\n      }\r\n\r\n      componentDidMount(){\r\n        if(this.props.match.params.id){\r\n            this.loadRegisterBook(this.props.match.params.id);\r\n        }\r\n        var temp=this.props.location.search;\r\n        var array=temp.split(\"&\");\r\n        var registerName;\r\n        var registerType;\r\n        var registerYear;\r\n        var i;\r\n        for(i=0 ;i<array.length;i++){\r\n          var individual=array[i].split(\"=\")\r\n          if(i==0)\r\n          registerName=individual[1];\r\n         if(i==1)\r\n         registerType=individual[1];\r\n         if(i==2)\r\n         registerYear=individual[1];\r\n        }\r\n        this.setState({\r\n          registerName: this.registerName,\r\n          registerYear: this.registerYear,\r\n          registerType: this.registerYear\r\n        });\r\n        this.getAllFoders();\r\n      }\r\n      handleFormInput = name => event => {\r\n        var formdata = this.state.data;\r\n        formdata[name] = event.target.value;\r\n          this.setState({\r\n            data: formdata\r\n          });\r\n      }\r\n\r\n      getAllFoders = () => {\r\n        listAllFolders().then(response => {\r\n          this.setState({\r\n            folders: response.data,\r\n          });\r\n          console.log(response);\r\n        }).catch(error =>{\r\n          console.log(error);\r\n        });\r\n      }\r\n      loadRegisterBook = (id) => {\r\n        \r\n        getRegisterBookById(id).then(response => {\r\n            this.setState({\r\n                data: response.data,\r\n                linearProgressShown: false,\r\n            });\r\n            console.log(response);\r\n        }).catch(error =>{\r\n            console.log(error);\r\n            this.setState({\r\n                linearProgressShown: false\r\n            });\r\n        });\r\n      }\r\n    handleUpdate = () => {\r\n        this.setState({\r\n            linearProgressShown: true\r\n        });\r\n        updateRegisterBook(this.state.data).then(response => {\r\n            dispatchAction({\r\n                type: \"MAIN_LINEAR_PROGRESS_SHOW\",\r\n                payload: {\r\n                    snackbarMessage: 'Successfuly updated register book ' + response.data.name,\r\n                    snackbarType: 'success'\r\n                }\r\n            });\r\n            dispatchAction({\r\n              type: \"RELOAD ALL REGISTER BOOKS\",\r\n              payload: {}\r\n            });\r\n            this.setRedirect();\r\n        }).catch(error => {\r\n            console.log(error);\r\n        });\r\n      }\r\n      listBooksAndFolders = (type,year,name,page, size) => {\r\n        // console.log(this.state.formdata.registerName);\r\n        // console.log(this.state.formdata.registerType);\r\n        // console.log(this.state.formdata.registerYear);\r\n        dispatchAction({\r\n          type: \"MAIN_LINEAR_PROGRESS_SHOW\"\r\n        });\r\n        getBooksAndFolders(type,year,name,page,size).then(response => {\r\n          this.setState({\r\n            data: response\r\n          },\r\n          dispatchAction({\r\n            type: \"MAIN_LINEAR_PROGRESS_HIDE\"\r\n          })\r\n          );\r\n          console.log(response);\r\n        }).catch(error => {\r\n          dispatchAction({\r\n            type: \"MAIN_LINEAR_PROGRESS_HIDE\"\r\n          });\r\n          console.log(error);\r\n        });\r\n      }\r\n    render(){\r\n        return(\r\n            <Dialog\r\n            open={true}\r\n            maxWidth=\"md\"\r\n            aria-labelledby=\"max-width-dialog-title\"\r\n            aria-describedby=\"max-width-dialog-description\"\r\n            fullWidth={true}\r\n            >\r\n            <DialogTitle id=\"max-width-dialog-title\">{\"Add a path folder\"}</DialogTitle>\r\n              <Grid container>\r\n                  <Grid  style={{marginTop:10+\"px\", marginLeft:20+\"px\"}}>\r\n                  <span style={{height:30+\"px\"}}>Please insert the desired path for this registry book</span>\r\n                  <TextField\r\n                      style={{marginTop:30+\"px\"}}\r\n                      autoFocus\r\n                      margin=\"dense\"\r\n                      id=\"pathFolder\"\r\n                      label=\"Folder Path\"\r\n                      variant=\"outlined\"\r\n                      type=\"text\"\r\n                      fullWidth\r\n                      onChange={this.handleFormInput('pathFolder')}\r\n                      value={this.state.data.pathFolder || ''}\r\n                  />\r\n                      <Select\r\n                                      fullWidth={true}\r\n                                       value={this.state.pathFolder}\r\n                                       onChange={this.handleFormInput('pathFolder')}\r\n                                      //  input={<Input name=\"pathFolder\" id=\"pathFolderId\" />}\r\n                                       displayEmpty\r\n                                       style={{marginTop:\"10px\"}}\r\n                                       variant=\"outlined\"\r\n                                   >\r\n                                      \r\n                                       {\r\n                                            this.state.folders && this.state.folders && this.state.folders &&\r\n                                            this.state.folders.map(e => (\r\n                                               <MenuItem key={e} value={e}>{e}</MenuItem>\r\n                                           ))\r\n                                       }\r\n                                   </Select>\r\n                      </Grid>\r\n                  \r\n              </Grid>\r\n            <DialogActions>\r\n            <Link to=\"/app/folders\" style={{textDecoration: 'none', color: 'white'}}>\r\n                <Button onClick={() => this.handleUpdate()} color=\"secondary\" variant=\"contained\">\r\n                    Save\r\n                </Button>\r\n            </Link>  \r\n            <Link to=\"/app/folders\" style={{textDecoration: 'none', color: 'white'}}>\r\n                <Button onClick=\"\" color=\"secondary\" variant=\"outlined\">\r\n                    Cancel\r\n                </Button>\r\n            </Link>       \r\n            </DialogActions>\r\n          </Dialog>\r\n        )\r\n    }\r\n   \r\n}"]},"metadata":{},"sourceType":"module"}